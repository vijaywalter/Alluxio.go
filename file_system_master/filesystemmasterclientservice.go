// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package file_system_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__

type FileSystemMasterClientService interface {
	common.AlluxioService
	//This interface contains file system master service endpoints for Alluxio clients.

	// Marks a file as completed.
	//
	// Parameters:
	//  - Path: the path of the file
	//  - Options: the method options
	CompleteFile(path string, options *CompleteFileTOptions) (err error)
	// Creates a directory.
	//
	// Parameters:
	//  - Path: the path of the directory
	//  - Options: the method options
	CreateDirectory(path string, options *CreateDirectoryTOptions) (err error)
	// Creates a file.
	//
	// Parameters:
	//  - Path: the path of the file
	//  - Options: the options for creating the file
	CreateFile(path string, options *CreateFileTOptions) (err error)
	// Frees the given file or directory from Alluxio.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	//  - Recursive: whether to free recursively
	Free(path string, recursive bool) (err error)
	// Returns the list of file blocks information for the given file.
	//
	// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
	//
	// Parameters:
	//  - Path: the path of the file
	GetFileBlockInfoList(path string) (r []*FileBlockInfo, err error)
	// Returns the status of the file or directory.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	GetStatus(path string) (r *FileInfo, err error)
	// Returns the status of the file or directory, only used internally by servers.
	//
	// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
	//
	// Parameters:
	//  - FileId: the id of the file or directory
	GetStatusInternal(fileId int64) (r *FileInfo, err error)
	// Generates a new block id for the given file.
	//
	// Parameters:
	//  - Path: the path of the file
	GetNewBlockIdForFile(path string) (r int64, err error)
	// Returns the UFS address of the root mount point.
	//
	// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
	GetUfsAddress() (r string, err error)
	// If the path points to a file, the method returns a singleton with its file information.
	// If the path points to a directory, the method returns a list with file information for the
	// directory contents.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	//  - Options: listStatus options
	ListStatus(path string, options *ListStatusTOptions) (r []*FileInfo, err error)
	// Loads metadata for the object identified by the given Alluxio path from UFS into Alluxio.
	//
	// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
	//
	// Parameters:
	//  - UfsPath: the path of the under file system
	//  - Recursive: whether to load meta data recursively
	LoadMetadata(ufsPath string, recursive bool) (r int64, err error)
	// Creates a new "mount point", mounts the given UFS path in the Alluxio namespace at the given
	// path. The path should not exist and should not be nested under any existing mount point.
	//
	// Parameters:
	//  - AlluxioPath: the path of alluxio mount point
	//  - UfsPath: the path of the under file system
	//  - Options: the options for creating the mount point
	Mount(alluxioPath string, ufsPath string, options *MountTOptions) (err error)
	// Deletes a file or a directory and returns whether the remove operation succeeded.
	// NOTE: Unfortunately, the method cannot be called "delete" as that is a reserved Thrift keyword.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	//  - Recursive: whether to remove recursively
	Remove(path string, recursive bool) (err error)
	// Renames a file or a directory.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	//  - DstPath: the desinationpath of the file
	Rename(path string, dstPath string) (err error)
	// Sets file or directory attributes.
	//
	// Parameters:
	//  - Path: the path of the file or directory
	//  - Options: the method options
	SetAttribute(path string, options *SetAttributeTOptions) (err error)
	// Schedules async persistence.
	//
	// Parameters:
	//  - Path: the path of the file
	ScheduleAsyncPersist(path string) (err error)
	// Deletes an existing "mount point", voiding the Alluxio namespace at the given path. The path
	// should correspond to an existing mount point. Any files in its subtree that are backed by UFS
	// will be persisted before they are removed from the Alluxio namespace.
	//
	// Parameters:
	//  - AlluxioPath: the path of the alluxio mount point
	Unmount(alluxioPath string) (err error)
}

//This interface contains file system master service endpoints for Alluxio clients.
type FileSystemMasterClientServiceClient struct {
	*common.AlluxioServiceClient
}

func NewFileSystemMasterClientServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FileSystemMasterClientServiceClient {
	return &FileSystemMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientFactory(t, f)}
}

func NewFileSystemMasterClientServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FileSystemMasterClientServiceClient {
	return &FileSystemMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientProtocol(t, iprot, oprot)}
}

// Marks a file as completed.
//
// Parameters:
//  - Path: the path of the file
//  - Options: the method options
func (p *FileSystemMasterClientServiceClient) CompleteFile(path string, options *CompleteFileTOptions) (err error) {
	if err = p.sendCompleteFile(path, options); err != nil {
		return
	}
	return p.recvCompleteFile()
}

func (p *FileSystemMasterClientServiceClient) sendCompleteFile(path string, options *CompleteFileTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("completeFile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceCompleteFileArgs{
		Path:    path,
		Options: options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvCompleteFile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "completeFile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "completeFile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "completeFile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "completeFile failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceCompleteFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Creates a directory.
//
// Parameters:
//  - Path: the path of the directory
//  - Options: the method options
func (p *FileSystemMasterClientServiceClient) CreateDirectory(path string, options *CreateDirectoryTOptions) (err error) {
	if err = p.sendCreateDirectory(path, options); err != nil {
		return
	}
	return p.recvCreateDirectory()
}

func (p *FileSystemMasterClientServiceClient) sendCreateDirectory(path string, options *CreateDirectoryTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createDirectory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceCreateDirectoryArgs{
		Path:    path,
		Options: options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvCreateDirectory() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createDirectory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createDirectory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createDirectory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createDirectory failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceCreateDirectoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Creates a file.
//
// Parameters:
//  - Path: the path of the file
//  - Options: the options for creating the file
func (p *FileSystemMasterClientServiceClient) CreateFile(path string, options *CreateFileTOptions) (err error) {
	if err = p.sendCreateFile(path, options); err != nil {
		return
	}
	return p.recvCreateFile()
}

func (p *FileSystemMasterClientServiceClient) sendCreateFile(path string, options *CreateFileTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createFile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceCreateFileArgs{
		Path:    path,
		Options: options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvCreateFile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createFile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createFile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createFile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createFile failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceCreateFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Frees the given file or directory from Alluxio.
//
// Parameters:
//  - Path: the path of the file or directory
//  - Recursive: whether to free recursively
func (p *FileSystemMasterClientServiceClient) Free(path string, recursive bool) (err error) {
	if err = p.sendFree(path, recursive); err != nil {
		return
	}
	return p.recvFree()
}

func (p *FileSystemMasterClientServiceClient) sendFree(path string, recursive bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("free", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceFreeArgs{
		Path:      path,
		Recursive: recursive,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvFree() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "free" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "free failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "free failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "free failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceFreeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Returns the list of file blocks information for the given file.
//
// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
//
// Parameters:
//  - Path: the path of the file
func (p *FileSystemMasterClientServiceClient) GetFileBlockInfoList(path string) (r []*FileBlockInfo, err error) {
	if err = p.sendGetFileBlockInfoList(path); err != nil {
		return
	}
	return p.recvGetFileBlockInfoList()
}

func (p *FileSystemMasterClientServiceClient) sendGetFileBlockInfoList(path string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFileBlockInfoList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceGetFileBlockInfoListArgs{
		Path: path,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvGetFileBlockInfoList() (value []*FileBlockInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFileBlockInfoList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFileBlockInfoList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFileBlockInfoList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFileBlockInfoList failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceGetFileBlockInfoListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the status of the file or directory.
//
// Parameters:
//  - Path: the path of the file or directory
func (p *FileSystemMasterClientServiceClient) GetStatus(path string) (r *FileInfo, err error) {
	if err = p.sendGetStatus(path); err != nil {
		return
	}
	return p.recvGetStatus()
}

func (p *FileSystemMasterClientServiceClient) sendGetStatus(path string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceGetStatusArgs{
		Path: path,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvGetStatus() (value *FileInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatus failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceGetStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the status of the file or directory, only used internally by servers.
//
// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
//
// Parameters:
//  - FileId: the id of the file or directory
func (p *FileSystemMasterClientServiceClient) GetStatusInternal(fileId int64) (r *FileInfo, err error) {
	if err = p.sendGetStatusInternal(fileId); err != nil {
		return
	}
	return p.recvGetStatusInternal()
}

func (p *FileSystemMasterClientServiceClient) sendGetStatusInternal(fileId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getStatusInternal", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceGetStatusInternalArgs{
		FileId: fileId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvGetStatusInternal() (value *FileInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getStatusInternal" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getStatusInternal failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getStatusInternal failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getStatusInternal failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceGetStatusInternalResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Generates a new block id for the given file.
//
// Parameters:
//  - Path: the path of the file
func (p *FileSystemMasterClientServiceClient) GetNewBlockIdForFile(path string) (r int64, err error) {
	if err = p.sendGetNewBlockIdForFile(path); err != nil {
		return
	}
	return p.recvGetNewBlockIdForFile()
}

func (p *FileSystemMasterClientServiceClient) sendGetNewBlockIdForFile(path string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNewBlockIdForFile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceGetNewBlockIdForFileArgs{
		Path: path,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvGetNewBlockIdForFile() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNewBlockIdForFile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNewBlockIdForFile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNewBlockIdForFile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNewBlockIdForFile failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceGetNewBlockIdForFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the UFS address of the root mount point.
//
// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
func (p *FileSystemMasterClientServiceClient) GetUfsAddress() (r string, err error) {
	if err = p.sendGetUfsAddress(); err != nil {
		return
	}
	return p.recvGetUfsAddress()
}

func (p *FileSystemMasterClientServiceClient) sendGetUfsAddress() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUfsAddress", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceGetUfsAddressArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvGetUfsAddress() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUfsAddress" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUfsAddress failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUfsAddress failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUfsAddress failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceGetUfsAddressResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// If the path points to a file, the method returns a singleton with its file information.
// If the path points to a directory, the method returns a list with file information for the
// directory contents.
//
// Parameters:
//  - Path: the path of the file or directory
//  - Options: listStatus options
func (p *FileSystemMasterClientServiceClient) ListStatus(path string, options *ListStatusTOptions) (r []*FileInfo, err error) {
	if err = p.sendListStatus(path, options); err != nil {
		return
	}
	return p.recvListStatus()
}

func (p *FileSystemMasterClientServiceClient) sendListStatus(path string, options *ListStatusTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listStatus", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceListStatusArgs{
		Path:    path,
		Options: options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvListStatus() (value []*FileInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listStatus" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listStatus failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listStatus failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listStatus failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceListStatusResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Loads metadata for the object identified by the given Alluxio path from UFS into Alluxio.
//
// THIS METHOD IS DEPRECATED SINCE VERSION 1.1 AND WILL BE REMOVED IN VERSION 2.0.
//
// Parameters:
//  - UfsPath: the path of the under file system
//  - Recursive: whether to load meta data recursively
func (p *FileSystemMasterClientServiceClient) LoadMetadata(ufsPath string, recursive bool) (r int64, err error) {
	if err = p.sendLoadMetadata(ufsPath, recursive); err != nil {
		return
	}
	return p.recvLoadMetadata()
}

func (p *FileSystemMasterClientServiceClient) sendLoadMetadata(ufsPath string, recursive bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loadMetadata", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceLoadMetadataArgs{
		UfsPath:   ufsPath,
		Recursive: recursive,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvLoadMetadata() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loadMetadata" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loadMetadata failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loadMetadata failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loadMetadata failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceLoadMetadataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	value = result.GetSuccess()
	return
}

// Creates a new "mount point", mounts the given UFS path in the Alluxio namespace at the given
// path. The path should not exist and should not be nested under any existing mount point.
//
// Parameters:
//  - AlluxioPath: the path of alluxio mount point
//  - UfsPath: the path of the under file system
//  - Options: the options for creating the mount point
func (p *FileSystemMasterClientServiceClient) Mount(alluxioPath string, ufsPath string, options *MountTOptions) (err error) {
	if err = p.sendMount(alluxioPath, ufsPath, options); err != nil {
		return
	}
	return p.recvMount()
}

func (p *FileSystemMasterClientServiceClient) sendMount(alluxioPath string, ufsPath string, options *MountTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceMountArgs{
		AlluxioPath: alluxioPath,
		UfsPath:     ufsPath,
		Options:     options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvMount() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mount failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceMountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Deletes a file or a directory and returns whether the remove operation succeeded.
// NOTE: Unfortunately, the method cannot be called "delete" as that is a reserved Thrift keyword.
//
// Parameters:
//  - Path: the path of the file or directory
//  - Recursive: whether to remove recursively
func (p *FileSystemMasterClientServiceClient) Remove(path string, recursive bool) (err error) {
	if err = p.sendRemove(path, recursive); err != nil {
		return
	}
	return p.recvRemove()
}

func (p *FileSystemMasterClientServiceClient) sendRemove(path string, recursive bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("remove", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceRemoveArgs{
		Path:      path,
		Recursive: recursive,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvRemove() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "remove" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "remove failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "remove failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "remove failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceRemoveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Renames a file or a directory.
//
// Parameters:
//  - Path: the path of the file or directory
//  - DstPath: the desinationpath of the file
func (p *FileSystemMasterClientServiceClient) Rename(path string, dstPath string) (err error) {
	if err = p.sendRename(path, dstPath); err != nil {
		return
	}
	return p.recvRename()
}

func (p *FileSystemMasterClientServiceClient) sendRename(path string, dstPath string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("rename", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceRenameArgs{
		Path:    path,
		DstPath: dstPath,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvRename() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "rename" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "rename failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "rename failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "rename failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceRenameResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Sets file or directory attributes.
//
// Parameters:
//  - Path: the path of the file or directory
//  - Options: the method options
func (p *FileSystemMasterClientServiceClient) SetAttribute(path string, options *SetAttributeTOptions) (err error) {
	if err = p.sendSetAttribute(path, options); err != nil {
		return
	}
	return p.recvSetAttribute()
}

func (p *FileSystemMasterClientServiceClient) sendSetAttribute(path string, options *SetAttributeTOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setAttribute", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceSetAttributeArgs{
		Path:    path,
		Options: options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvSetAttribute() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setAttribute" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setAttribute failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setAttribute failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setAttribute failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceSetAttributeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Schedules async persistence.
//
// Parameters:
//  - Path: the path of the file
func (p *FileSystemMasterClientServiceClient) ScheduleAsyncPersist(path string) (err error) {
	if err = p.sendScheduleAsyncPersist(path); err != nil {
		return
	}
	return p.recvScheduleAsyncPersist()
}

func (p *FileSystemMasterClientServiceClient) sendScheduleAsyncPersist(path string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("scheduleAsyncPersist", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceScheduleAsyncPersistArgs{
		Path: path,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvScheduleAsyncPersist() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "scheduleAsyncPersist" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "scheduleAsyncPersist failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "scheduleAsyncPersist failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "scheduleAsyncPersist failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceScheduleAsyncPersistResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Deletes an existing "mount point", voiding the Alluxio namespace at the given path. The path
// should correspond to an existing mount point. Any files in its subtree that are backed by UFS
// will be persisted before they are removed from the Alluxio namespace.
//
// Parameters:
//  - AlluxioPath: the path of the alluxio mount point
func (p *FileSystemMasterClientServiceClient) Unmount(alluxioPath string) (err error) {
	if err = p.sendUnmount(alluxioPath); err != nil {
		return
	}
	return p.recvUnmount()
}

func (p *FileSystemMasterClientServiceClient) sendUnmount(alluxioPath string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unmount", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FileSystemMasterClientServiceUnmountArgs{
		AlluxioPath: alluxioPath,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *FileSystemMasterClientServiceClient) recvUnmount() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unmount" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unmount failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unmount failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unmount failed: invalid message type")
		return
	}
	result := FileSystemMasterClientServiceUnmountResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

type FileSystemMasterClientServiceProcessor struct {
	*common.AlluxioServiceProcessor
}

func NewFileSystemMasterClientServiceProcessor(handler FileSystemMasterClientService) *FileSystemMasterClientServiceProcessor {
	self42 := &FileSystemMasterClientServiceProcessor{common.NewAlluxioServiceProcessor(handler)}
	self42.AddToProcessorMap("completeFile", &fileSystemMasterClientServiceProcessorCompleteFile{handler: handler})
	self42.AddToProcessorMap("createDirectory", &fileSystemMasterClientServiceProcessorCreateDirectory{handler: handler})
	self42.AddToProcessorMap("createFile", &fileSystemMasterClientServiceProcessorCreateFile{handler: handler})
	self42.AddToProcessorMap("free", &fileSystemMasterClientServiceProcessorFree{handler: handler})
	self42.AddToProcessorMap("getFileBlockInfoList", &fileSystemMasterClientServiceProcessorGetFileBlockInfoList{handler: handler})
	self42.AddToProcessorMap("getStatus", &fileSystemMasterClientServiceProcessorGetStatus{handler: handler})
	self42.AddToProcessorMap("getStatusInternal", &fileSystemMasterClientServiceProcessorGetStatusInternal{handler: handler})
	self42.AddToProcessorMap("getNewBlockIdForFile", &fileSystemMasterClientServiceProcessorGetNewBlockIdForFile{handler: handler})
	self42.AddToProcessorMap("getUfsAddress", &fileSystemMasterClientServiceProcessorGetUfsAddress{handler: handler})
	self42.AddToProcessorMap("listStatus", &fileSystemMasterClientServiceProcessorListStatus{handler: handler})
	self42.AddToProcessorMap("loadMetadata", &fileSystemMasterClientServiceProcessorLoadMetadata{handler: handler})
	self42.AddToProcessorMap("mount", &fileSystemMasterClientServiceProcessorMount{handler: handler})
	self42.AddToProcessorMap("remove", &fileSystemMasterClientServiceProcessorRemove{handler: handler})
	self42.AddToProcessorMap("rename", &fileSystemMasterClientServiceProcessorRename{handler: handler})
	self42.AddToProcessorMap("setAttribute", &fileSystemMasterClientServiceProcessorSetAttribute{handler: handler})
	self42.AddToProcessorMap("scheduleAsyncPersist", &fileSystemMasterClientServiceProcessorScheduleAsyncPersist{handler: handler})
	self42.AddToProcessorMap("unmount", &fileSystemMasterClientServiceProcessorUnmount{handler: handler})
	return self42
}

type fileSystemMasterClientServiceProcessorCompleteFile struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorCompleteFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceCompleteFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("completeFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceCompleteFileResult{}
	var err2 error
	if err2 = p.handler.CompleteFile(args.Path, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing completeFile: "+err2.Error())
			oprot.WriteMessageBegin("completeFile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("completeFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorCreateDirectory struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorCreateDirectory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceCreateDirectoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createDirectory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceCreateDirectoryResult{}
	var err2 error
	if err2 = p.handler.CreateDirectory(args.Path, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createDirectory: "+err2.Error())
			oprot.WriteMessageBegin("createDirectory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createDirectory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorCreateFile struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorCreateFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceCreateFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceCreateFileResult{}
	var err2 error
	if err2 = p.handler.CreateFile(args.Path, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createFile: "+err2.Error())
			oprot.WriteMessageBegin("createFile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorFree struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorFree) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceFreeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("free", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceFreeResult{}
	var err2 error
	if err2 = p.handler.Free(args.Path, args.Recursive); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing free: "+err2.Error())
			oprot.WriteMessageBegin("free", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("free", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorGetFileBlockInfoList struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorGetFileBlockInfoList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceGetFileBlockInfoListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFileBlockInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceGetFileBlockInfoListResult{}
	var retval []*FileBlockInfo
	var err2 error
	if retval, err2 = p.handler.GetFileBlockInfoList(args.Path); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFileBlockInfoList: "+err2.Error())
			oprot.WriteMessageBegin("getFileBlockInfoList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFileBlockInfoList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorGetStatus struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorGetStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceGetStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceGetStatusResult{}
	var retval *FileInfo
	var err2 error
	if retval, err2 = p.handler.GetStatus(args.Path); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: "+err2.Error())
			oprot.WriteMessageBegin("getStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorGetStatusInternal struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorGetStatusInternal) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceGetStatusInternalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getStatusInternal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceGetStatusInternalResult{}
	var retval *FileInfo
	var err2 error
	if retval, err2 = p.handler.GetStatusInternal(args.FileId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatusInternal: "+err2.Error())
			oprot.WriteMessageBegin("getStatusInternal", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getStatusInternal", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorGetNewBlockIdForFile struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorGetNewBlockIdForFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceGetNewBlockIdForFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNewBlockIdForFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceGetNewBlockIdForFileResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetNewBlockIdForFile(args.Path); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNewBlockIdForFile: "+err2.Error())
			oprot.WriteMessageBegin("getNewBlockIdForFile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getNewBlockIdForFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorGetUfsAddress struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorGetUfsAddress) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceGetUfsAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUfsAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceGetUfsAddressResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetUfsAddress(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUfsAddress: "+err2.Error())
		oprot.WriteMessageBegin("getUfsAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUfsAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorListStatus struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorListStatus) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceListStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceListStatusResult{}
	var retval []*FileInfo
	var err2 error
	if retval, err2 = p.handler.ListStatus(args.Path, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listStatus: "+err2.Error())
			oprot.WriteMessageBegin("listStatus", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorLoadMetadata struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorLoadMetadata) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceLoadMetadataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceLoadMetadataResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.LoadMetadata(args.UfsPath, args.Recursive); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadMetadata: "+err2.Error())
			oprot.WriteMessageBegin("loadMetadata", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("loadMetadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorMount struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorMount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceMountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceMountResult{}
	var err2 error
	if err2 = p.handler.Mount(args.AlluxioPath, args.UfsPath, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mount: "+err2.Error())
			oprot.WriteMessageBegin("mount", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorRemove struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorRemove) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceRemoveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceRemoveResult{}
	var err2 error
	if err2 = p.handler.Remove(args.Path, args.Recursive); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing remove: "+err2.Error())
			oprot.WriteMessageBegin("remove", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("remove", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorRename struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorRename) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceRenameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("rename", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceRenameResult{}
	var err2 error
	if err2 = p.handler.Rename(args.Path, args.DstPath); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rename: "+err2.Error())
			oprot.WriteMessageBegin("rename", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("rename", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorSetAttribute struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorSetAttribute) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceSetAttributeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setAttribute", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceSetAttributeResult{}
	var err2 error
	if err2 = p.handler.SetAttribute(args.Path, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setAttribute: "+err2.Error())
			oprot.WriteMessageBegin("setAttribute", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setAttribute", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorScheduleAsyncPersist struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorScheduleAsyncPersist) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceScheduleAsyncPersistArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scheduleAsyncPersist", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceScheduleAsyncPersistResult{}
	var err2 error
	if err2 = p.handler.ScheduleAsyncPersist(args.Path); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scheduleAsyncPersist: "+err2.Error())
			oprot.WriteMessageBegin("scheduleAsyncPersist", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("scheduleAsyncPersist", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fileSystemMasterClientServiceProcessorUnmount struct {
	handler FileSystemMasterClientService
}

func (p *fileSystemMasterClientServiceProcessorUnmount) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FileSystemMasterClientServiceUnmountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unmount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FileSystemMasterClientServiceUnmountResult{}
	var err2 error
	if err2 = p.handler.Unmount(args.AlluxioPath); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unmount: "+err2.Error())
			oprot.WriteMessageBegin("unmount", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("unmount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Path: the path of the file
//  - Options: the method options
type FileSystemMasterClientServiceCompleteFileArgs struct {
	Path    string                `thrift:"path,1" json:"path"`
	Options *CompleteFileTOptions `thrift:"options,2" json:"options"`
}

func NewFileSystemMasterClientServiceCompleteFileArgs() *FileSystemMasterClientServiceCompleteFileArgs {
	return &FileSystemMasterClientServiceCompleteFileArgs{}
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) GetPath() string {
	return p.Path
}

var FileSystemMasterClientServiceCompleteFileArgs_Options_DEFAULT *CompleteFileTOptions

func (p *FileSystemMasterClientServiceCompleteFileArgs) GetOptions() *CompleteFileTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceCompleteFileArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceCompleteFileArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) readField2(iprot thrift.TProtocol) error {
	p.Options = &CompleteFileTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("completeFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCompleteFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCompleteFileArgs(%+v)", *p)
}

// Attributes:
//  - E
type FileSystemMasterClientServiceCompleteFileResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceCompleteFileResult() *FileSystemMasterClientServiceCompleteFileResult {
	return &FileSystemMasterClientServiceCompleteFileResult{}
}

var FileSystemMasterClientServiceCompleteFileResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceCompleteFileResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceCompleteFileResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceCompleteFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceCompleteFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("completeFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCompleteFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceCompleteFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCompleteFileResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the directory
//  - Options: the method options
type FileSystemMasterClientServiceCreateDirectoryArgs struct {
	Path    string                   `thrift:"path,1" json:"path"`
	Options *CreateDirectoryTOptions `thrift:"options,2" json:"options"`
}

func NewFileSystemMasterClientServiceCreateDirectoryArgs() *FileSystemMasterClientServiceCreateDirectoryArgs {
	return &FileSystemMasterClientServiceCreateDirectoryArgs{}
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) GetPath() string {
	return p.Path
}

var FileSystemMasterClientServiceCreateDirectoryArgs_Options_DEFAULT *CreateDirectoryTOptions

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) GetOptions() *CreateDirectoryTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceCreateDirectoryArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceCreateDirectoryArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) readField2(iprot thrift.TProtocol) error {
	p.Options = &CreateDirectoryTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDirectory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateDirectoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCreateDirectoryArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type FileSystemMasterClientServiceCreateDirectoryResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceCreateDirectoryResult() *FileSystemMasterClientServiceCreateDirectoryResult {
	return &FileSystemMasterClientServiceCreateDirectoryResult{}
}

var FileSystemMasterClientServiceCreateDirectoryResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceCreateDirectoryResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceCreateDirectoryResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceCreateDirectoryResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceCreateDirectoryResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceCreateDirectoryResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceCreateDirectoryResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createDirectory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateDirectoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCreateDirectoryResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
//  - Options: the options for creating the file
type FileSystemMasterClientServiceCreateFileArgs struct {
	Path    string              `thrift:"path,1" json:"path"`
	Options *CreateFileTOptions `thrift:"options,2" json:"options"`
}

func NewFileSystemMasterClientServiceCreateFileArgs() *FileSystemMasterClientServiceCreateFileArgs {
	return &FileSystemMasterClientServiceCreateFileArgs{}
}

func (p *FileSystemMasterClientServiceCreateFileArgs) GetPath() string {
	return p.Path
}

var FileSystemMasterClientServiceCreateFileArgs_Options_DEFAULT *CreateFileTOptions

func (p *FileSystemMasterClientServiceCreateFileArgs) GetOptions() *CreateFileTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceCreateFileArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceCreateFileArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceCreateFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileArgs) readField2(iprot thrift.TProtocol) error {
	p.Options = &CreateFileTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCreateFileArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type FileSystemMasterClientServiceCreateFileResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceCreateFileResult() *FileSystemMasterClientServiceCreateFileResult {
	return &FileSystemMasterClientServiceCreateFileResult{}
}

var FileSystemMasterClientServiceCreateFileResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceCreateFileResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceCreateFileResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceCreateFileResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceCreateFileResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceCreateFileResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceCreateFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceCreateFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateFileResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceCreateFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceCreateFileResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
//  - Recursive: whether to free recursively
type FileSystemMasterClientServiceFreeArgs struct {
	Path      string `thrift:"path,1" json:"path"`
	Recursive bool   `thrift:"recursive,2" json:"recursive"`
}

func NewFileSystemMasterClientServiceFreeArgs() *FileSystemMasterClientServiceFreeArgs {
	return &FileSystemMasterClientServiceFreeArgs{}
}

func (p *FileSystemMasterClientServiceFreeArgs) GetPath() string {
	return p.Path
}

func (p *FileSystemMasterClientServiceFreeArgs) GetRecursive() bool {
	return p.Recursive
}
func (p *FileSystemMasterClientServiceFreeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Recursive = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("free_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceFreeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recursive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Recursive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recursive (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recursive: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceFreeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceFreeArgs(%+v)", *p)
}

// Attributes:
//  - E
type FileSystemMasterClientServiceFreeResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceFreeResult() *FileSystemMasterClientServiceFreeResult {
	return &FileSystemMasterClientServiceFreeResult{}
}

var FileSystemMasterClientServiceFreeResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceFreeResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceFreeResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceFreeResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceFreeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("free_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceFreeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceFreeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceFreeResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
type FileSystemMasterClientServiceGetFileBlockInfoListArgs struct {
	Path string `thrift:"path,1" json:"path"`
}

func NewFileSystemMasterClientServiceGetFileBlockInfoListArgs() *FileSystemMasterClientServiceGetFileBlockInfoListArgs {
	return &FileSystemMasterClientServiceGetFileBlockInfoListArgs{}
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) GetPath() string {
	return p.Path
}
func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFileBlockInfoList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetFileBlockInfoListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type FileSystemMasterClientServiceGetFileBlockInfoListResult struct {
	Success []*FileBlockInfo             `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceGetFileBlockInfoListResult() *FileSystemMasterClientServiceGetFileBlockInfoListResult {
	return &FileSystemMasterClientServiceGetFileBlockInfoListResult{}
}

var FileSystemMasterClientServiceGetFileBlockInfoListResult_Success_DEFAULT []*FileBlockInfo

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) GetSuccess() []*FileBlockInfo {
	return p.Success
}

var FileSystemMasterClientServiceGetFileBlockInfoListResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceGetFileBlockInfoListResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FileBlockInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem43 := &FileBlockInfo{}
		if err := _elem43.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
		}
		p.Success = append(p.Success, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFileBlockInfoList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetFileBlockInfoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetFileBlockInfoListResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
type FileSystemMasterClientServiceGetStatusArgs struct {
	Path string `thrift:"path,1" json:"path"`
}

func NewFileSystemMasterClientServiceGetStatusArgs() *FileSystemMasterClientServiceGetStatusArgs {
	return &FileSystemMasterClientServiceGetStatusArgs{}
}

func (p *FileSystemMasterClientServiceGetStatusArgs) GetPath() string {
	return p.Path
}
func (p *FileSystemMasterClientServiceGetStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type FileSystemMasterClientServiceGetStatusResult struct {
	Success *FileInfo                    `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceGetStatusResult() *FileSystemMasterClientServiceGetStatusResult {
	return &FileSystemMasterClientServiceGetStatusResult{}
}

var FileSystemMasterClientServiceGetStatusResult_Success_DEFAULT *FileInfo

func (p *FileSystemMasterClientServiceGetStatusResult) GetSuccess() *FileInfo {
	if !p.IsSetSuccess() {
		return FileSystemMasterClientServiceGetStatusResult_Success_DEFAULT
	}
	return p.Success
}

var FileSystemMasterClientServiceGetStatusResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceGetStatusResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceGetStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceGetStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &FileInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetStatusResult(%+v)", *p)
}

// Attributes:
//  - FileId: the id of the file or directory
type FileSystemMasterClientServiceGetStatusInternalArgs struct {
	FileId int64 `thrift:"fileId,1" json:"fileId"`
}

func NewFileSystemMasterClientServiceGetStatusInternalArgs() *FileSystemMasterClientServiceGetStatusInternalArgs {
	return &FileSystemMasterClientServiceGetStatusInternalArgs{}
}

func (p *FileSystemMasterClientServiceGetStatusInternalArgs) GetFileId() int64 {
	return p.FileId
}
func (p *FileSystemMasterClientServiceGetStatusInternalArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileId = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatusInternal_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileId: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusInternalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetStatusInternalArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type FileSystemMasterClientServiceGetStatusInternalResult struct {
	Success *FileInfo                    `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceGetStatusInternalResult() *FileSystemMasterClientServiceGetStatusInternalResult {
	return &FileSystemMasterClientServiceGetStatusInternalResult{}
}

var FileSystemMasterClientServiceGetStatusInternalResult_Success_DEFAULT *FileInfo

func (p *FileSystemMasterClientServiceGetStatusInternalResult) GetSuccess() *FileInfo {
	if !p.IsSetSuccess() {
		return FileSystemMasterClientServiceGetStatusInternalResult_Success_DEFAULT
	}
	return p.Success
}

var FileSystemMasterClientServiceGetStatusInternalResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceGetStatusInternalResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceGetStatusInternalResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceGetStatusInternalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &FileInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getStatusInternal_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetStatusInternalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetStatusInternalResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
type FileSystemMasterClientServiceGetNewBlockIdForFileArgs struct {
	Path string `thrift:"path,1" json:"path"`
}

func NewFileSystemMasterClientServiceGetNewBlockIdForFileArgs() *FileSystemMasterClientServiceGetNewBlockIdForFileArgs {
	return &FileSystemMasterClientServiceGetNewBlockIdForFileArgs{}
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) GetPath() string {
	return p.Path
}
func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewBlockIdForFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetNewBlockIdForFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type FileSystemMasterClientServiceGetNewBlockIdForFileResult struct {
	Success *int64                       `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceGetNewBlockIdForFileResult() *FileSystemMasterClientServiceGetNewBlockIdForFileResult {
	return &FileSystemMasterClientServiceGetNewBlockIdForFileResult{}
}

var FileSystemMasterClientServiceGetNewBlockIdForFileResult_Success_DEFAULT int64

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FileSystemMasterClientServiceGetNewBlockIdForFileResult_Success_DEFAULT
	}
	return *p.Success
}

var FileSystemMasterClientServiceGetNewBlockIdForFileResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceGetNewBlockIdForFileResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewBlockIdForFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetNewBlockIdForFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetNewBlockIdForFileResult(%+v)", *p)
}

type FileSystemMasterClientServiceGetUfsAddressArgs struct {
}

func NewFileSystemMasterClientServiceGetUfsAddressArgs() *FileSystemMasterClientServiceGetUfsAddressArgs {
	return &FileSystemMasterClientServiceGetUfsAddressArgs{}
}

func (p *FileSystemMasterClientServiceGetUfsAddressArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUfsAddress_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetUfsAddressArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FileSystemMasterClientServiceGetUfsAddressResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewFileSystemMasterClientServiceGetUfsAddressResult() *FileSystemMasterClientServiceGetUfsAddressResult {
	return &FileSystemMasterClientServiceGetUfsAddressResult{}
}

var FileSystemMasterClientServiceGetUfsAddressResult_Success_DEFAULT string

func (p *FileSystemMasterClientServiceGetUfsAddressResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FileSystemMasterClientServiceGetUfsAddressResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FileSystemMasterClientServiceGetUfsAddressResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUfsAddress_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceGetUfsAddressResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceGetUfsAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceGetUfsAddressResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
//  - Options: listStatus options
type FileSystemMasterClientServiceListStatusArgs struct {
	Path    string              `thrift:"path,1" json:"path"`
	Options *ListStatusTOptions `thrift:"options,2" json:"options"`
}

func NewFileSystemMasterClientServiceListStatusArgs() *FileSystemMasterClientServiceListStatusArgs {
	return &FileSystemMasterClientServiceListStatusArgs{}
}

func (p *FileSystemMasterClientServiceListStatusArgs) GetPath() string {
	return p.Path
}

var FileSystemMasterClientServiceListStatusArgs_Options_DEFAULT *ListStatusTOptions

func (p *FileSystemMasterClientServiceListStatusArgs) GetOptions() *ListStatusTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceListStatusArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceListStatusArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceListStatusArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusArgs) readField2(iprot thrift.TProtocol) error {
	p.Options = &ListStatusTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceListStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceListStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceListStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type FileSystemMasterClientServiceListStatusResult struct {
	Success []*FileInfo                  `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceListStatusResult() *FileSystemMasterClientServiceListStatusResult {
	return &FileSystemMasterClientServiceListStatusResult{}
}

var FileSystemMasterClientServiceListStatusResult_Success_DEFAULT []*FileInfo

func (p *FileSystemMasterClientServiceListStatusResult) GetSuccess() []*FileInfo {
	return p.Success
}

var FileSystemMasterClientServiceListStatusResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceListStatusResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceListStatusResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceListStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceListStatusResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceListStatusResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FileInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem44 := &FileInfo{}
		if err := _elem44.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
		}
		p.Success = append(p.Success, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceListStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceListStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceListStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceListStatusResult(%+v)", *p)
}

// Attributes:
//  - UfsPath: the path of the under file system
//  - Recursive: whether to load meta data recursively
type FileSystemMasterClientServiceLoadMetadataArgs struct {
	UfsPath   string `thrift:"ufsPath,1" json:"ufsPath"`
	Recursive bool   `thrift:"recursive,2" json:"recursive"`
}

func NewFileSystemMasterClientServiceLoadMetadataArgs() *FileSystemMasterClientServiceLoadMetadataArgs {
	return &FileSystemMasterClientServiceLoadMetadataArgs{}
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) GetUfsPath() string {
	return p.UfsPath
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) GetRecursive() bool {
	return p.Recursive
}
func (p *FileSystemMasterClientServiceLoadMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UfsPath = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Recursive = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loadMetadata_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ufsPath", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ufsPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.UfsPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ufsPath (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ufsPath: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recursive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Recursive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recursive (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recursive: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceLoadMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceLoadMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
//  - Ioe
type FileSystemMasterClientServiceLoadMetadataResult struct {
	Success *int64                       `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe     *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceLoadMetadataResult() *FileSystemMasterClientServiceLoadMetadataResult {
	return &FileSystemMasterClientServiceLoadMetadataResult{}
}

var FileSystemMasterClientServiceLoadMetadataResult_Success_DEFAULT int64

func (p *FileSystemMasterClientServiceLoadMetadataResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FileSystemMasterClientServiceLoadMetadataResult_Success_DEFAULT
	}
	return *p.Success
}

var FileSystemMasterClientServiceLoadMetadataResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceLoadMetadataResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceLoadMetadataResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceLoadMetadataResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceLoadMetadataResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceLoadMetadataResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceLoadMetadataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loadMetadata_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceLoadMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceLoadMetadataResult(%+v)", *p)
}

// Attributes:
//  - AlluxioPath: the path of alluxio mount point
//  - UfsPath: the path of the under file system
//  - Options: the options for creating the mount point
type FileSystemMasterClientServiceMountArgs struct {
	AlluxioPath string         `thrift:"alluxioPath,1" json:"alluxioPath"`
	UfsPath     string         `thrift:"ufsPath,2" json:"ufsPath"`
	Options     *MountTOptions `thrift:"options,3" json:"options"`
}

func NewFileSystemMasterClientServiceMountArgs() *FileSystemMasterClientServiceMountArgs {
	return &FileSystemMasterClientServiceMountArgs{}
}

func (p *FileSystemMasterClientServiceMountArgs) GetAlluxioPath() string {
	return p.AlluxioPath
}

func (p *FileSystemMasterClientServiceMountArgs) GetUfsPath() string {
	return p.UfsPath
}

var FileSystemMasterClientServiceMountArgs_Options_DEFAULT *MountTOptions

func (p *FileSystemMasterClientServiceMountArgs) GetOptions() *MountTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceMountArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceMountArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceMountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AlluxioPath = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UfsPath = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountArgs) readField3(iprot thrift.TProtocol) error {
	p.Options = &MountTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alluxioPath", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alluxioPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.AlluxioPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.alluxioPath (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alluxioPath: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceMountArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ufsPath", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ufsPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.UfsPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ufsPath (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ufsPath: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceMountArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceMountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceMountArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type FileSystemMasterClientServiceMountResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceMountResult() *FileSystemMasterClientServiceMountResult {
	return &FileSystemMasterClientServiceMountResult{}
}

var FileSystemMasterClientServiceMountResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceMountResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceMountResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceMountResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceMountResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceMountResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceMountResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceMountResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceMountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceMountResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceMountResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceMountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceMountResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
//  - Recursive: whether to remove recursively
type FileSystemMasterClientServiceRemoveArgs struct {
	Path      string `thrift:"path,1" json:"path"`
	Recursive bool   `thrift:"recursive,2" json:"recursive"`
}

func NewFileSystemMasterClientServiceRemoveArgs() *FileSystemMasterClientServiceRemoveArgs {
	return &FileSystemMasterClientServiceRemoveArgs{}
}

func (p *FileSystemMasterClientServiceRemoveArgs) GetPath() string {
	return p.Path
}

func (p *FileSystemMasterClientServiceRemoveArgs) GetRecursive() bool {
	return p.Recursive
}
func (p *FileSystemMasterClientServiceRemoveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Recursive = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceRemoveArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recursive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Recursive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recursive (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recursive: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceRemoveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceRemoveArgs(%+v)", *p)
}

// Attributes:
//  - E
type FileSystemMasterClientServiceRemoveResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceRemoveResult() *FileSystemMasterClientServiceRemoveResult {
	return &FileSystemMasterClientServiceRemoveResult{}
}

var FileSystemMasterClientServiceRemoveResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceRemoveResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceRemoveResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceRemoveResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceRemoveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("remove_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRemoveResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceRemoveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceRemoveResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
//  - DstPath: the desinationpath of the file
type FileSystemMasterClientServiceRenameArgs struct {
	Path    string `thrift:"path,1" json:"path"`
	DstPath string `thrift:"dstPath,2" json:"dstPath"`
}

func NewFileSystemMasterClientServiceRenameArgs() *FileSystemMasterClientServiceRenameArgs {
	return &FileSystemMasterClientServiceRenameArgs{}
}

func (p *FileSystemMasterClientServiceRenameArgs) GetPath() string {
	return p.Path
}

func (p *FileSystemMasterClientServiceRenameArgs) GetDstPath() string {
	return p.DstPath
}
func (p *FileSystemMasterClientServiceRenameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DstPath = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceRenameArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dstPath", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dstPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.DstPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dstPath (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dstPath: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceRenameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceRenameArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type FileSystemMasterClientServiceRenameResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceRenameResult() *FileSystemMasterClientServiceRenameResult {
	return &FileSystemMasterClientServiceRenameResult{}
}

var FileSystemMasterClientServiceRenameResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceRenameResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceRenameResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceRenameResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceRenameResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceRenameResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceRenameResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceRenameResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceRenameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("rename_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceRenameResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceRenameResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceRenameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceRenameResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file or directory
//  - Options: the method options
type FileSystemMasterClientServiceSetAttributeArgs struct {
	Path    string                `thrift:"path,1" json:"path"`
	Options *SetAttributeTOptions `thrift:"options,2" json:"options"`
}

func NewFileSystemMasterClientServiceSetAttributeArgs() *FileSystemMasterClientServiceSetAttributeArgs {
	return &FileSystemMasterClientServiceSetAttributeArgs{}
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) GetPath() string {
	return p.Path
}

var FileSystemMasterClientServiceSetAttributeArgs_Options_DEFAULT *SetAttributeTOptions

func (p *FileSystemMasterClientServiceSetAttributeArgs) GetOptions() *SetAttributeTOptions {
	if !p.IsSetOptions() {
		return FileSystemMasterClientServiceSetAttributeArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *FileSystemMasterClientServiceSetAttributeArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) readField2(iprot thrift.TProtocol) error {
	p.Options = &SetAttributeTOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setAttribute_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceSetAttributeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceSetAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type FileSystemMasterClientServiceSetAttributeResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceSetAttributeResult() *FileSystemMasterClientServiceSetAttributeResult {
	return &FileSystemMasterClientServiceSetAttributeResult{}
}

var FileSystemMasterClientServiceSetAttributeResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceSetAttributeResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceSetAttributeResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceSetAttributeResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceSetAttributeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setAttribute_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceSetAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceSetAttributeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceSetAttributeResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
type FileSystemMasterClientServiceScheduleAsyncPersistArgs struct {
	Path string `thrift:"path,1" json:"path"`
}

func NewFileSystemMasterClientServiceScheduleAsyncPersistArgs() *FileSystemMasterClientServiceScheduleAsyncPersistArgs {
	return &FileSystemMasterClientServiceScheduleAsyncPersistArgs{}
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) GetPath() string {
	return p.Path
}
func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scheduleAsyncPersist_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceScheduleAsyncPersistArgs(%+v)", *p)
}

// Attributes:
//  - E
type FileSystemMasterClientServiceScheduleAsyncPersistResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewFileSystemMasterClientServiceScheduleAsyncPersistResult() *FileSystemMasterClientServiceScheduleAsyncPersistResult {
	return &FileSystemMasterClientServiceScheduleAsyncPersistResult{}
}

var FileSystemMasterClientServiceScheduleAsyncPersistResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceScheduleAsyncPersistResult_E_DEFAULT
	}
	return p.E
}
func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scheduleAsyncPersist_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceScheduleAsyncPersistResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceScheduleAsyncPersistResult(%+v)", *p)
}

// Attributes:
//  - AlluxioPath: the path of the alluxio mount point
type FileSystemMasterClientServiceUnmountArgs struct {
	AlluxioPath string `thrift:"alluxioPath,1" json:"alluxioPath"`
}

func NewFileSystemMasterClientServiceUnmountArgs() *FileSystemMasterClientServiceUnmountArgs {
	return &FileSystemMasterClientServiceUnmountArgs{}
}

func (p *FileSystemMasterClientServiceUnmountArgs) GetAlluxioPath() string {
	return p.AlluxioPath
}
func (p *FileSystemMasterClientServiceUnmountArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AlluxioPath = v
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unmount_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("alluxioPath", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:alluxioPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.AlluxioPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.alluxioPath (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:alluxioPath: ", p), err)
	}
	return err
}

func (p *FileSystemMasterClientServiceUnmountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceUnmountArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type FileSystemMasterClientServiceUnmountResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewFileSystemMasterClientServiceUnmountResult() *FileSystemMasterClientServiceUnmountResult {
	return &FileSystemMasterClientServiceUnmountResult{}
}

var FileSystemMasterClientServiceUnmountResult_E_DEFAULT *exception.AlluxioTException

func (p *FileSystemMasterClientServiceUnmountResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return FileSystemMasterClientServiceUnmountResult_E_DEFAULT
	}
	return p.E
}

var FileSystemMasterClientServiceUnmountResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *FileSystemMasterClientServiceUnmountResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return FileSystemMasterClientServiceUnmountResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *FileSystemMasterClientServiceUnmountResult) IsSetE() bool {
	return p.E != nil
}

func (p *FileSystemMasterClientServiceUnmountResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *FileSystemMasterClientServiceUnmountResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unmount_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemMasterClientServiceUnmountResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceUnmountResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *FileSystemMasterClientServiceUnmountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemMasterClientServiceUnmountResult(%+v)", *p)
}
