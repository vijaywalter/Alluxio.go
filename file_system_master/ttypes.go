// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package file_system_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__
var GoUnusedProtection__ int

type LoadMetadataTType int64

const (
	LoadMetadataTType_Never  LoadMetadataTType = 0
	LoadMetadataTType_Once   LoadMetadataTType = 1
	LoadMetadataTType_Always LoadMetadataTType = 2
)

func (p LoadMetadataTType) String() string {
	switch p {
	case LoadMetadataTType_Never:
		return "Never"
	case LoadMetadataTType_Once:
		return "Once"
	case LoadMetadataTType_Always:
		return "Always"
	}
	return "<UNSET>"
}

func LoadMetadataTTypeFromString(s string) (LoadMetadataTType, error) {
	switch s {
	case "Never":
		return LoadMetadataTType_Never, nil
	case "Once":
		return LoadMetadataTType_Once, nil
	case "Always":
		return LoadMetadataTType_Always, nil
	}
	return LoadMetadataTType(0), fmt.Errorf("not a valid LoadMetadataTType string")
}

func LoadMetadataTTypePtr(v LoadMetadataTType) *LoadMetadataTType { return &v }

func (p LoadMetadataTType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *LoadMetadataTType) UnmarshalText(text []byte) error {
	q, err := LoadMetadataTTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - UfsLength
type CompleteFileTOptions struct {
	UfsLength *int64 `thrift:"ufsLength,1" json:"ufsLength,omitempty"`
}

func NewCompleteFileTOptions() *CompleteFileTOptions {
	return &CompleteFileTOptions{}
}

var CompleteFileTOptions_UfsLength_DEFAULT int64

func (p *CompleteFileTOptions) GetUfsLength() int64 {
	if !p.IsSetUfsLength() {
		return CompleteFileTOptions_UfsLength_DEFAULT
	}
	return *p.UfsLength
}
func (p *CompleteFileTOptions) IsSetUfsLength() bool {
	return p.UfsLength != nil
}

func (p *CompleteFileTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompleteFileTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UfsLength = &v
	}
	return nil
}

func (p *CompleteFileTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompleteFileTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompleteFileTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUfsLength() {
		if err := oprot.WriteFieldBegin("ufsLength", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ufsLength: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UfsLength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ufsLength (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ufsLength: ", p), err)
		}
	}
	return err
}

func (p *CompleteFileTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompleteFileTOptions(%+v)", *p)
}

// Attributes:
//  - Persisted
//  - Recursive
//  - AllowExists
type CreateDirectoryTOptions struct {
	Persisted   *bool `thrift:"persisted,1" json:"persisted,omitempty"`
	Recursive   *bool `thrift:"recursive,2" json:"recursive,omitempty"`
	AllowExists *bool `thrift:"allowExists,3" json:"allowExists,omitempty"`
}

func NewCreateDirectoryTOptions() *CreateDirectoryTOptions {
	return &CreateDirectoryTOptions{}
}

var CreateDirectoryTOptions_Persisted_DEFAULT bool

func (p *CreateDirectoryTOptions) GetPersisted() bool {
	if !p.IsSetPersisted() {
		return CreateDirectoryTOptions_Persisted_DEFAULT
	}
	return *p.Persisted
}

var CreateDirectoryTOptions_Recursive_DEFAULT bool

func (p *CreateDirectoryTOptions) GetRecursive() bool {
	if !p.IsSetRecursive() {
		return CreateDirectoryTOptions_Recursive_DEFAULT
	}
	return *p.Recursive
}

var CreateDirectoryTOptions_AllowExists_DEFAULT bool

func (p *CreateDirectoryTOptions) GetAllowExists() bool {
	if !p.IsSetAllowExists() {
		return CreateDirectoryTOptions_AllowExists_DEFAULT
	}
	return *p.AllowExists
}
func (p *CreateDirectoryTOptions) IsSetPersisted() bool {
	return p.Persisted != nil
}

func (p *CreateDirectoryTOptions) IsSetRecursive() bool {
	return p.Recursive != nil
}

func (p *CreateDirectoryTOptions) IsSetAllowExists() bool {
	return p.AllowExists != nil
}

func (p *CreateDirectoryTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateDirectoryTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Persisted = &v
	}
	return nil
}

func (p *CreateDirectoryTOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Recursive = &v
	}
	return nil
}

func (p *CreateDirectoryTOptions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AllowExists = &v
	}
	return nil
}

func (p *CreateDirectoryTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateDirectoryTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateDirectoryTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersisted() {
		if err := oprot.WriteFieldBegin("persisted", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:persisted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Persisted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.persisted (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:persisted: ", p), err)
		}
	}
	return err
}

func (p *CreateDirectoryTOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecursive() {
		if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recursive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Recursive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recursive (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recursive: ", p), err)
		}
	}
	return err
}

func (p *CreateDirectoryTOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowExists() {
		if err := oprot.WriteFieldBegin("allowExists", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:allowExists: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AllowExists)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.allowExists (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:allowExists: ", p), err)
		}
	}
	return err
}

func (p *CreateDirectoryTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateDirectoryTOptions(%+v)", *p)
}

// Attributes:
//  - BlockSizeBytes
//  - Persisted
//  - Recursive
//  - TTL
type CreateFileTOptions struct {
	BlockSizeBytes *int64 `thrift:"blockSizeBytes,1" json:"blockSizeBytes,omitempty"`
	Persisted      *bool  `thrift:"persisted,2" json:"persisted,omitempty"`
	Recursive      *bool  `thrift:"recursive,3" json:"recursive,omitempty"`
	TTL            *int64 `thrift:"ttl,4" json:"ttl,omitempty"`
}

func NewCreateFileTOptions() *CreateFileTOptions {
	return &CreateFileTOptions{}
}

var CreateFileTOptions_BlockSizeBytes_DEFAULT int64

func (p *CreateFileTOptions) GetBlockSizeBytes() int64 {
	if !p.IsSetBlockSizeBytes() {
		return CreateFileTOptions_BlockSizeBytes_DEFAULT
	}
	return *p.BlockSizeBytes
}

var CreateFileTOptions_Persisted_DEFAULT bool

func (p *CreateFileTOptions) GetPersisted() bool {
	if !p.IsSetPersisted() {
		return CreateFileTOptions_Persisted_DEFAULT
	}
	return *p.Persisted
}

var CreateFileTOptions_Recursive_DEFAULT bool

func (p *CreateFileTOptions) GetRecursive() bool {
	if !p.IsSetRecursive() {
		return CreateFileTOptions_Recursive_DEFAULT
	}
	return *p.Recursive
}

var CreateFileTOptions_TTL_DEFAULT int64

func (p *CreateFileTOptions) GetTTL() int64 {
	if !p.IsSetTTL() {
		return CreateFileTOptions_TTL_DEFAULT
	}
	return *p.TTL
}
func (p *CreateFileTOptions) IsSetBlockSizeBytes() bool {
	return p.BlockSizeBytes != nil
}

func (p *CreateFileTOptions) IsSetPersisted() bool {
	return p.Persisted != nil
}

func (p *CreateFileTOptions) IsSetRecursive() bool {
	return p.Recursive != nil
}

func (p *CreateFileTOptions) IsSetTTL() bool {
	return p.TTL != nil
}

func (p *CreateFileTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateFileTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockSizeBytes = &v
	}
	return nil
}

func (p *CreateFileTOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Persisted = &v
	}
	return nil
}

func (p *CreateFileTOptions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Recursive = &v
	}
	return nil
}

func (p *CreateFileTOptions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TTL = &v
	}
	return nil
}

func (p *CreateFileTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CreateFileTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateFileTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBlockSizeBytes() {
		if err := oprot.WriteFieldBegin("blockSizeBytes", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockSizeBytes: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.BlockSizeBytes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.blockSizeBytes (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockSizeBytes: ", p), err)
		}
	}
	return err
}

func (p *CreateFileTOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersisted() {
		if err := oprot.WriteFieldBegin("persisted", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:persisted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Persisted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.persisted (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:persisted: ", p), err)
		}
	}
	return err
}

func (p *CreateFileTOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecursive() {
		if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recursive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Recursive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recursive (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recursive: ", p), err)
		}
	}
	return err
}

func (p *CreateFileTOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTTL() {
		if err := oprot.WriteFieldBegin("ttl", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ttl: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TTL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ttl (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ttl: ", p), err)
		}
	}
	return err
}

func (p *CreateFileTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateFileTOptions(%+v)", *p)
}

// Attributes:
//  - ReadOnly
//  - Properties
type MountTOptions struct {
	ReadOnly   *bool             `thrift:"readOnly,1" json:"readOnly,omitempty"`
	Properties map[string]string `thrift:"properties,2" json:"properties,omitempty"`
}

func NewMountTOptions() *MountTOptions {
	return &MountTOptions{}
}

var MountTOptions_ReadOnly_DEFAULT bool

func (p *MountTOptions) GetReadOnly() bool {
	if !p.IsSetReadOnly() {
		return MountTOptions_ReadOnly_DEFAULT
	}
	return *p.ReadOnly
}

var MountTOptions_Properties_DEFAULT map[string]string

func (p *MountTOptions) GetProperties() map[string]string {
	return p.Properties
}
func (p *MountTOptions) IsSetReadOnly() bool {
	return p.ReadOnly != nil
}

func (p *MountTOptions) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *MountTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MountTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReadOnly = &v
	}
	return nil
}

func (p *MountTOptions) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val1 = v
		}
		p.Properties[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *MountTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MountTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MountTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadOnly() {
		if err := oprot.WriteFieldBegin("readOnly", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:readOnly: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ReadOnly)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readOnly (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:readOnly: ", p), err)
		}
	}
	return err
}

func (p *MountTOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:properties: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Properties {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:properties: ", p), err)
		}
	}
	return err
}

func (p *MountTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MountTOptions(%+v)", *p)
}

// Attributes:
//  - LoadDirectChildren
//  - LoadMetadataType
type ListStatusTOptions struct {
	LoadDirectChildren *bool              `thrift:"loadDirectChildren,1" json:"loadDirectChildren,omitempty"`
	LoadMetadataType   *LoadMetadataTType `thrift:"loadMetadataType,2" json:"loadMetadataType,omitempty"`
}

func NewListStatusTOptions() *ListStatusTOptions {
	return &ListStatusTOptions{}
}

var ListStatusTOptions_LoadDirectChildren_DEFAULT bool

func (p *ListStatusTOptions) GetLoadDirectChildren() bool {
	if !p.IsSetLoadDirectChildren() {
		return ListStatusTOptions_LoadDirectChildren_DEFAULT
	}
	return *p.LoadDirectChildren
}

var ListStatusTOptions_LoadMetadataType_DEFAULT LoadMetadataTType

func (p *ListStatusTOptions) GetLoadMetadataType() LoadMetadataTType {
	if !p.IsSetLoadMetadataType() {
		return ListStatusTOptions_LoadMetadataType_DEFAULT
	}
	return *p.LoadMetadataType
}
func (p *ListStatusTOptions) IsSetLoadDirectChildren() bool {
	return p.LoadDirectChildren != nil
}

func (p *ListStatusTOptions) IsSetLoadMetadataType() bool {
	return p.LoadMetadataType != nil
}

func (p *ListStatusTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ListStatusTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LoadDirectChildren = &v
	}
	return nil
}

func (p *ListStatusTOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := LoadMetadataTType(v)
		p.LoadMetadataType = &temp
	}
	return nil
}

func (p *ListStatusTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ListStatusTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ListStatusTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadDirectChildren() {
		if err := oprot.WriteFieldBegin("loadDirectChildren", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:loadDirectChildren: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.LoadDirectChildren)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.loadDirectChildren (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:loadDirectChildren: ", p), err)
		}
	}
	return err
}

func (p *ListStatusTOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLoadMetadataType() {
		if err := oprot.WriteFieldBegin("loadMetadataType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loadMetadataType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LoadMetadataType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.loadMetadataType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loadMetadataType: ", p), err)
		}
	}
	return err
}

func (p *ListStatusTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListStatusTOptions(%+v)", *p)
}

// Contains the information of a block in a file. In addition to the BlockInfo, it includes the
// offset in the file, and the under file system locations of the block replicas.
//
// Attributes:
//  - BlockInfo
//  - Offset
//  - UfsLocations
//  - UfsStringLocations
type FileBlockInfo struct {
	BlockInfo          *common.BlockInfo          `thrift:"blockInfo,1" json:"blockInfo"`
	Offset             int64                      `thrift:"offset,2" json:"offset"`
	UfsLocations       []*common.WorkerNetAddress `thrift:"ufsLocations,3" json:"ufsLocations"`
	UfsStringLocations []string                   `thrift:"ufsStringLocations,4" json:"ufsStringLocations"`
}

func NewFileBlockInfo() *FileBlockInfo {
	return &FileBlockInfo{}
}

var FileBlockInfo_BlockInfo_DEFAULT *common.BlockInfo

func (p *FileBlockInfo) GetBlockInfo() *common.BlockInfo {
	if !p.IsSetBlockInfo() {
		return FileBlockInfo_BlockInfo_DEFAULT
	}
	return p.BlockInfo
}

func (p *FileBlockInfo) GetOffset() int64 {
	return p.Offset
}

func (p *FileBlockInfo) GetUfsLocations() []*common.WorkerNetAddress {
	return p.UfsLocations
}

func (p *FileBlockInfo) GetUfsStringLocations() []string {
	return p.UfsStringLocations
}
func (p *FileBlockInfo) IsSetBlockInfo() bool {
	return p.BlockInfo != nil
}

func (p *FileBlockInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileBlockInfo) readField1(iprot thrift.TProtocol) error {
	p.BlockInfo = &common.BlockInfo{}
	if err := p.BlockInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BlockInfo), err)
	}
	return nil
}

func (p *FileBlockInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *FileBlockInfo) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*common.WorkerNetAddress, 0, size)
	p.UfsLocations = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &common.WorkerNetAddress{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.UfsLocations = append(p.UfsLocations, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileBlockInfo) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.UfsStringLocations = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.UfsStringLocations = append(p.UfsStringLocations, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileBlockInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileBlockInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileBlockInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockInfo", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockInfo: ", p), err)
	}
	if err := p.BlockInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BlockInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockInfo: ", p), err)
	}
	return err
}

func (p *FileBlockInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err)
	}
	return err
}

func (p *FileBlockInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ufsLocations", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ufsLocations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UfsLocations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UfsLocations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ufsLocations: ", p), err)
	}
	return err
}

func (p *FileBlockInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ufsStringLocations", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ufsStringLocations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.UfsStringLocations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UfsStringLocations {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ufsStringLocations: ", p), err)
	}
	return err
}

func (p *FileBlockInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileBlockInfo(%+v)", *p)
}

// Attributes:
//  - FileId
//  - Name
//  - Path
//  - UfsPath
//  - Length
//  - BlockSizeBytes
//  - CreationTimeMs
//  - Completed
//  - Folder
//  - Pinned
//  - Cacheable
//  - Persisted
//  - BlockIds
//  - InMemoryPercentage
//  - LastModificationTimeMs
//  - TTL
//  - Owner
//  - Group
//  - Mode
//  - PersistenceState
//  - MountPoint
//  - FileBlockInfos
type FileInfo struct {
	FileId         int64   `thrift:"fileId,1" json:"fileId"`
	Name           string  `thrift:"name,2" json:"name"`
	Path           string  `thrift:"path,3" json:"path"`
	UfsPath        string  `thrift:"ufsPath,4" json:"ufsPath"`
	Length         int64   `thrift:"length,5" json:"length"`
	BlockSizeBytes int64   `thrift:"blockSizeBytes,6" json:"blockSizeBytes"`
	CreationTimeMs int64   `thrift:"creationTimeMs,7" json:"creationTimeMs"`
	Completed      bool    `thrift:"completed,8" json:"completed"`
	Folder         bool    `thrift:"folder,9" json:"folder"`
	Pinned         bool    `thrift:"pinned,10" json:"pinned"`
	Cacheable      bool    `thrift:"cacheable,11" json:"cacheable"`
	Persisted      bool    `thrift:"persisted,12" json:"persisted"`
	BlockIds       []int64 `thrift:"blockIds,13" json:"blockIds"`
	// unused field # 14
	InMemoryPercentage     int32            `thrift:"inMemoryPercentage,15" json:"inMemoryPercentage"`
	LastModificationTimeMs int64            `thrift:"lastModificationTimeMs,16" json:"lastModificationTimeMs"`
	TTL                    int64            `thrift:"ttl,17" json:"ttl"`
	Owner                  string           `thrift:"owner,18" json:"owner"`
	Group                  string           `thrift:"group,19" json:"group"`
	Mode                   int32            `thrift:"mode,20" json:"mode"`
	PersistenceState       string           `thrift:"persistenceState,21" json:"persistenceState"`
	MountPoint             bool             `thrift:"mountPoint,22" json:"mountPoint"`
	FileBlockInfos         []*FileBlockInfo `thrift:"fileBlockInfos,23" json:"fileBlockInfos"`
}

func NewFileInfo() *FileInfo {
	return &FileInfo{}
}

func (p *FileInfo) GetFileId() int64 {
	return p.FileId
}

func (p *FileInfo) GetName() string {
	return p.Name
}

func (p *FileInfo) GetPath() string {
	return p.Path
}

func (p *FileInfo) GetUfsPath() string {
	return p.UfsPath
}

func (p *FileInfo) GetLength() int64 {
	return p.Length
}

func (p *FileInfo) GetBlockSizeBytes() int64 {
	return p.BlockSizeBytes
}

func (p *FileInfo) GetCreationTimeMs() int64 {
	return p.CreationTimeMs
}

func (p *FileInfo) GetCompleted() bool {
	return p.Completed
}

func (p *FileInfo) GetFolder() bool {
	return p.Folder
}

func (p *FileInfo) GetPinned() bool {
	return p.Pinned
}

func (p *FileInfo) GetCacheable() bool {
	return p.Cacheable
}

func (p *FileInfo) GetPersisted() bool {
	return p.Persisted
}

func (p *FileInfo) GetBlockIds() []int64 {
	return p.BlockIds
}

func (p *FileInfo) GetInMemoryPercentage() int32 {
	return p.InMemoryPercentage
}

func (p *FileInfo) GetLastModificationTimeMs() int64 {
	return p.LastModificationTimeMs
}

func (p *FileInfo) GetTTL() int64 {
	return p.TTL
}

func (p *FileInfo) GetOwner() string {
	return p.Owner
}

func (p *FileInfo) GetGroup() string {
	return p.Group
}

func (p *FileInfo) GetMode() int32 {
	return p.Mode
}

func (p *FileInfo) GetPersistenceState() string {
	return p.PersistenceState
}

func (p *FileInfo) GetMountPoint() bool {
	return p.MountPoint
}

func (p *FileInfo) GetFileBlockInfos() []*FileBlockInfo {
	return p.FileBlockInfos
}
func (p *FileInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileId = v
	}
	return nil
}

func (p *FileInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *FileInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *FileInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UfsPath = v
	}
	return nil
}

func (p *FileInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *FileInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.BlockSizeBytes = v
	}
	return nil
}

func (p *FileInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreationTimeMs = v
	}
	return nil
}

func (p *FileInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Completed = v
	}
	return nil
}

func (p *FileInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Folder = v
	}
	return nil
}

func (p *FileInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Pinned = v
	}
	return nil
}

func (p *FileInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Cacheable = v
	}
	return nil
}

func (p *FileInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Persisted = v
	}
	return nil
}

func (p *FileInfo) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.BlockIds = tSlice
	for i := 0; i < size; i++ {
		var _elem4 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.BlockIds = append(p.BlockIds, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.InMemoryPercentage = v
	}
	return nil
}

func (p *FileInfo) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LastModificationTimeMs = v
	}
	return nil
}

func (p *FileInfo) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TTL = v
	}
	return nil
}

func (p *FileInfo) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Owner = v
	}
	return nil
}

func (p *FileInfo) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Group = v
	}
	return nil
}

func (p *FileInfo) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Mode = v
	}
	return nil
}

func (p *FileInfo) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PersistenceState = v
	}
	return nil
}

func (p *FileInfo) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.MountPoint = v
	}
	return nil
}

func (p *FileInfo) readField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FileBlockInfo, 0, size)
	p.FileBlockInfos = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &FileBlockInfo{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.FileBlockInfos = append(p.FileBlockInfos, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileId: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:path: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ufsPath", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ufsPath: ", p), err)
	}
	if err := oprot.WriteString(string(p.UfsPath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ufsPath (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ufsPath: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:length: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:length: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockSizeBytes", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:blockSizeBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockSizeBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockSizeBytes (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:blockSizeBytes: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("creationTimeMs", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:creationTimeMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CreationTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creationTimeMs (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:creationTimeMs: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completed", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:completed: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Completed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.completed (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:completed: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("folder", thrift.BOOL, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:folder: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Folder)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.folder (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:folder: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pinned", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:pinned: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Pinned)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pinned (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:pinned: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cacheable", thrift.BOOL, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:cacheable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Cacheable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cacheable (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:cacheable: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("persisted", thrift.BOOL, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:persisted: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Persisted)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.persisted (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:persisted: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockIds", thrift.LIST, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:blockIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.BlockIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BlockIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:blockIds: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inMemoryPercentage", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:inMemoryPercentage: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.InMemoryPercentage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.inMemoryPercentage (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:inMemoryPercentage: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastModificationTimeMs", thrift.I64, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:lastModificationTimeMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LastModificationTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastModificationTimeMs (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:lastModificationTimeMs: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I64, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:ttl: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TTL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:ttl: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("owner", thrift.STRING, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:owner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Owner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.owner (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:owner: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group", thrift.STRING, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:group: ", p), err)
	}
	if err := oprot.WriteString(string(p.Group)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.group (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:group: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mode", thrift.I32, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:mode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Mode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mode (20) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:mode: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("persistenceState", thrift.STRING, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:persistenceState: ", p), err)
	}
	if err := oprot.WriteString(string(p.PersistenceState)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.persistenceState (21) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:persistenceState: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mountPoint", thrift.BOOL, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:mountPoint: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.MountPoint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mountPoint (22) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:mountPoint: ", p), err)
	}
	return err
}

func (p *FileInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileBlockInfos", thrift.LIST, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:fileBlockInfos: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FileBlockInfos)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.FileBlockInfos {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:fileBlockInfos: ", p), err)
	}
	return err
}

func (p *FileInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileInfo(%+v)", *p)
}

// Attributes:
//  - CommandType
//  - CommandOptions
type FileSystemCommand struct {
	CommandType    common.CommandType        `thrift:"commandType,1" json:"commandType"`
	CommandOptions *FileSystemCommandOptions `thrift:"commandOptions,2" json:"commandOptions"`
}

func NewFileSystemCommand() *FileSystemCommand {
	return &FileSystemCommand{}
}

func (p *FileSystemCommand) GetCommandType() common.CommandType {
	return p.CommandType
}

var FileSystemCommand_CommandOptions_DEFAULT FileSystemCommandOptions

func (p *FileSystemCommand) GetCommandOptions() FileSystemCommandOptions {
	if !p.IsSetCommandOptions() {
		return FileSystemCommand_CommandOptions_DEFAULT
	}
	return *p.CommandOptions
}
func (p *FileSystemCommand) IsSetCommandOptions() bool {
	return p.CommandOptions != nil
}

func (p *FileSystemCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemCommand) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := common.CommandType(v)
		p.CommandType = temp
	}
	return nil
}

func (p *FileSystemCommand) readField2(iprot thrift.TProtocol) error {
	p.CommandOptions = &FileSystemCommandOptions{}
	if err := p.CommandOptions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CommandOptions), err)
	}
	return nil
}

func (p *FileSystemCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileSystemCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commandType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:commandType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CommandType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commandType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:commandType: ", p), err)
	}
	return err
}

func (p *FileSystemCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commandOptions", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commandOptions: ", p), err)
	}
	if err := p.CommandOptions.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CommandOptions), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commandOptions: ", p), err)
	}
	return err
}

func (p *FileSystemCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemCommand(%+v)", *p)
}

// Attributes:
//  - PersistFiles
type PersistCommandOptions struct {
	PersistFiles []*PersistFile `thrift:"persistFiles,1" json:"persistFiles"`
}

func NewPersistCommandOptions() *PersistCommandOptions {
	return &PersistCommandOptions{}
}

func (p *PersistCommandOptions) GetPersistFiles() []*PersistFile {
	return p.PersistFiles
}
func (p *PersistCommandOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PersistCommandOptions) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PersistFile, 0, size)
	p.PersistFiles = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &PersistFile{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.PersistFiles = append(p.PersistFiles, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PersistCommandOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PersistCommandOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PersistCommandOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("persistFiles", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:persistFiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PersistFiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PersistFiles {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:persistFiles: ", p), err)
	}
	return err
}

func (p *PersistCommandOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersistCommandOptions(%+v)", *p)
}

// Attributes:
//  - FileId
//  - BlockIds
type PersistFile struct {
	FileId   int64   `thrift:"fileId,1" json:"fileId"`
	BlockIds []int64 `thrift:"blockIds,2" json:"blockIds"`
}

func NewPersistFile() *PersistFile {
	return &PersistFile{}
}

func (p *PersistFile) GetFileId() int64 {
	return p.FileId
}

func (p *PersistFile) GetBlockIds() []int64 {
	return p.BlockIds
}
func (p *PersistFile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PersistFile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileId = v
	}
	return nil
}

func (p *PersistFile) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.BlockIds = tSlice
	for i := 0; i < size; i++ {
		var _elem7 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.BlockIds = append(p.BlockIds, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *PersistFile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PersistFile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PersistFile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileId: ", p), err)
	}
	return err
}

func (p *PersistFile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.BlockIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.BlockIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockIds: ", p), err)
	}
	return err
}

func (p *PersistFile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PersistFile(%+v)", *p)
}

// Attributes:
//  - Pinned
//  - TTL
//  - Persisted
//  - Owner
//  - Group
//  - Mode
//  - Recursive
type SetAttributeTOptions struct {
	Pinned    *bool   `thrift:"pinned,1" json:"pinned,omitempty"`
	TTL       *int64  `thrift:"ttl,2" json:"ttl,omitempty"`
	Persisted *bool   `thrift:"persisted,3" json:"persisted,omitempty"`
	Owner     *string `thrift:"owner,4" json:"owner,omitempty"`
	Group     *string `thrift:"group,5" json:"group,omitempty"`
	Mode      *int16  `thrift:"mode,6" json:"mode,omitempty"`
	Recursive *bool   `thrift:"recursive,7" json:"recursive,omitempty"`
}

func NewSetAttributeTOptions() *SetAttributeTOptions {
	return &SetAttributeTOptions{}
}

var SetAttributeTOptions_Pinned_DEFAULT bool

func (p *SetAttributeTOptions) GetPinned() bool {
	if !p.IsSetPinned() {
		return SetAttributeTOptions_Pinned_DEFAULT
	}
	return *p.Pinned
}

var SetAttributeTOptions_TTL_DEFAULT int64

func (p *SetAttributeTOptions) GetTTL() int64 {
	if !p.IsSetTTL() {
		return SetAttributeTOptions_TTL_DEFAULT
	}
	return *p.TTL
}

var SetAttributeTOptions_Persisted_DEFAULT bool

func (p *SetAttributeTOptions) GetPersisted() bool {
	if !p.IsSetPersisted() {
		return SetAttributeTOptions_Persisted_DEFAULT
	}
	return *p.Persisted
}

var SetAttributeTOptions_Owner_DEFAULT string

func (p *SetAttributeTOptions) GetOwner() string {
	if !p.IsSetOwner() {
		return SetAttributeTOptions_Owner_DEFAULT
	}
	return *p.Owner
}

var SetAttributeTOptions_Group_DEFAULT string

func (p *SetAttributeTOptions) GetGroup() string {
	if !p.IsSetGroup() {
		return SetAttributeTOptions_Group_DEFAULT
	}
	return *p.Group
}

var SetAttributeTOptions_Mode_DEFAULT int16

func (p *SetAttributeTOptions) GetMode() int16 {
	if !p.IsSetMode() {
		return SetAttributeTOptions_Mode_DEFAULT
	}
	return *p.Mode
}

var SetAttributeTOptions_Recursive_DEFAULT bool

func (p *SetAttributeTOptions) GetRecursive() bool {
	if !p.IsSetRecursive() {
		return SetAttributeTOptions_Recursive_DEFAULT
	}
	return *p.Recursive
}
func (p *SetAttributeTOptions) IsSetPinned() bool {
	return p.Pinned != nil
}

func (p *SetAttributeTOptions) IsSetTTL() bool {
	return p.TTL != nil
}

func (p *SetAttributeTOptions) IsSetPersisted() bool {
	return p.Persisted != nil
}

func (p *SetAttributeTOptions) IsSetOwner() bool {
	return p.Owner != nil
}

func (p *SetAttributeTOptions) IsSetGroup() bool {
	return p.Group != nil
}

func (p *SetAttributeTOptions) IsSetMode() bool {
	return p.Mode != nil
}

func (p *SetAttributeTOptions) IsSetRecursive() bool {
	return p.Recursive != nil
}

func (p *SetAttributeTOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SetAttributeTOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Pinned = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TTL = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Persisted = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Owner = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Group = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Mode = &v
	}
	return nil
}

func (p *SetAttributeTOptions) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Recursive = &v
	}
	return nil
}

func (p *SetAttributeTOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SetAttributeTOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SetAttributeTOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPinned() {
		if err := oprot.WriteFieldBegin("pinned", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pinned: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Pinned)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.pinned (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pinned: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTTL() {
		if err := oprot.WriteFieldBegin("ttl", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ttl: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TTL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ttl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ttl: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersisted() {
		if err := oprot.WriteFieldBegin("persisted", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:persisted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Persisted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.persisted (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:persisted: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwner() {
		if err := oprot.WriteFieldBegin("owner", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:owner: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Owner)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.owner (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:owner: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroup() {
		if err := oprot.WriteFieldBegin("group", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:group: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Group)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.group (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:group: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMode() {
		if err := oprot.WriteFieldBegin("mode", thrift.I16, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mode: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Mode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mode: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecursive() {
		if err := oprot.WriteFieldBegin("recursive", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:recursive: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Recursive)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recursive (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:recursive: ", p), err)
		}
	}
	return err
}

func (p *SetAttributeTOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetAttributeTOptions(%+v)", *p)
}

// Attributes:
//  - PersistOptions
type FileSystemCommandOptions struct {
	PersistOptions *PersistCommandOptions `thrift:"persistOptions,1" json:"persistOptions,omitempty"`
}

func NewFileSystemCommandOptions() *FileSystemCommandOptions {
	return &FileSystemCommandOptions{}
}

var FileSystemCommandOptions_PersistOptions_DEFAULT *PersistCommandOptions

func (p *FileSystemCommandOptions) GetPersistOptions() *PersistCommandOptions {
	if !p.IsSetPersistOptions() {
		return FileSystemCommandOptions_PersistOptions_DEFAULT
	}
	return p.PersistOptions
}
func (p *FileSystemCommandOptions) CountSetFieldsFileSystemCommandOptions() int {
	count := 0
	if p.IsSetPersistOptions() {
		count++
	}
	return count

}

func (p *FileSystemCommandOptions) IsSetPersistOptions() bool {
	return p.PersistOptions != nil
}

func (p *FileSystemCommandOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FileSystemCommandOptions) readField1(iprot thrift.TProtocol) error {
	p.PersistOptions = &PersistCommandOptions{}
	if err := p.PersistOptions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PersistOptions), err)
	}
	return nil
}

func (p *FileSystemCommandOptions) Write(oprot thrift.TProtocol) error {
	if c := p.CountSetFieldsFileSystemCommandOptions(); c != 1 {
		return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
	}
	if err := oprot.WriteStructBegin("FileSystemCommandOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileSystemCommandOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPersistOptions() {
		if err := oprot.WriteFieldBegin("persistOptions", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:persistOptions: ", p), err)
		}
		if err := p.PersistOptions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PersistOptions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:persistOptions: ", p), err)
		}
	}
	return err
}

func (p *FileSystemCommandOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileSystemCommandOptions(%+v)", *p)
}
