// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"file_system_master"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void completeFile(string path, CompleteFileTOptions options)")
	fmt.Fprintln(os.Stderr, "  void createDirectory(string path, CreateDirectoryTOptions options)")
	fmt.Fprintln(os.Stderr, "  void createFile(string path, CreateFileTOptions options)")
	fmt.Fprintln(os.Stderr, "  void free(string path, bool recursive)")
	fmt.Fprintln(os.Stderr, "   getFileBlockInfoList(string path)")
	fmt.Fprintln(os.Stderr, "  FileInfo getStatus(string path)")
	fmt.Fprintln(os.Stderr, "  FileInfo getStatusInternal(i64 fileId)")
	fmt.Fprintln(os.Stderr, "  i64 getNewBlockIdForFile(string path)")
	fmt.Fprintln(os.Stderr, "  string getUfsAddress()")
	fmt.Fprintln(os.Stderr, "   listStatus(string path, ListStatusTOptions options)")
	fmt.Fprintln(os.Stderr, "  i64 loadMetadata(string ufsPath, bool recursive)")
	fmt.Fprintln(os.Stderr, "  void mount(string alluxioPath, string ufsPath, MountTOptions options)")
	fmt.Fprintln(os.Stderr, "  void remove(string path, bool recursive)")
	fmt.Fprintln(os.Stderr, "  void rename(string path, string dstPath)")
	fmt.Fprintln(os.Stderr, "  void setAttribute(string path, SetAttributeTOptions options)")
	fmt.Fprintln(os.Stderr, "  void scheduleAsyncPersist(string path)")
	fmt.Fprintln(os.Stderr, "  void unmount(string alluxioPath)")
	fmt.Fprintln(os.Stderr, "  i64 getServiceVersion()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := file_system_master.NewFileSystemMasterClientServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "completeFile":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CompleteFile requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg46 := flag.Arg(2)
		mbTrans47 := thrift.NewTMemoryBufferLen(len(arg46))
		defer mbTrans47.Close()
		_, err48 := mbTrans47.WriteString(arg46)
		if err48 != nil {
			Usage()
			return
		}
		factory49 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt50 := factory49.GetProtocol(mbTrans47)
		argvalue1 := file_system_master.NewCompleteFileTOptions()
		err51 := argvalue1.Read(jsProt50)
		if err51 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CompleteFile(value0, value1))
		fmt.Print("\n")
		break
	case "createDirectory":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateDirectory requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg53 := flag.Arg(2)
		mbTrans54 := thrift.NewTMemoryBufferLen(len(arg53))
		defer mbTrans54.Close()
		_, err55 := mbTrans54.WriteString(arg53)
		if err55 != nil {
			Usage()
			return
		}
		factory56 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt57 := factory56.GetProtocol(mbTrans54)
		argvalue1 := file_system_master.NewCreateDirectoryTOptions()
		err58 := argvalue1.Read(jsProt57)
		if err58 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateDirectory(value0, value1))
		fmt.Print("\n")
		break
	case "createFile":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateFile requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg60 := flag.Arg(2)
		mbTrans61 := thrift.NewTMemoryBufferLen(len(arg60))
		defer mbTrans61.Close()
		_, err62 := mbTrans61.WriteString(arg60)
		if err62 != nil {
			Usage()
			return
		}
		factory63 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt64 := factory63.GetProtocol(mbTrans61)
		argvalue1 := file_system_master.NewCreateFileTOptions()
		err65 := argvalue1.Read(jsProt64)
		if err65 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.CreateFile(value0, value1))
		fmt.Print("\n")
		break
	case "free":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Free requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.Free(value0, value1))
		fmt.Print("\n")
		break
	case "getFileBlockInfoList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetFileBlockInfoList requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetFileBlockInfoList(value0))
		fmt.Print("\n")
		break
	case "getStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetStatus requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetStatus(value0))
		fmt.Print("\n")
		break
	case "getStatusInternal":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetStatusInternal requires 1 args")
			flag.Usage()
		}
		argvalue0, err70 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err70 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetStatusInternal(value0))
		fmt.Print("\n")
		break
	case "getNewBlockIdForFile":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNewBlockIdForFile requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetNewBlockIdForFile(value0))
		fmt.Print("\n")
		break
	case "getUfsAddress":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetUfsAddress requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetUfsAddress())
		fmt.Print("\n")
		break
	case "listStatus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ListStatus requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg73 := flag.Arg(2)
		mbTrans74 := thrift.NewTMemoryBufferLen(len(arg73))
		defer mbTrans74.Close()
		_, err75 := mbTrans74.WriteString(arg73)
		if err75 != nil {
			Usage()
			return
		}
		factory76 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt77 := factory76.GetProtocol(mbTrans74)
		argvalue1 := file_system_master.NewListStatusTOptions()
		err78 := argvalue1.Read(jsProt77)
		if err78 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ListStatus(value0, value1))
		fmt.Print("\n")
		break
	case "loadMetadata":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "LoadMetadata requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.LoadMetadata(value0, value1))
		fmt.Print("\n")
		break
	case "mount":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "Mount requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg83 := flag.Arg(3)
		mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
		defer mbTrans84.Close()
		_, err85 := mbTrans84.WriteString(arg83)
		if err85 != nil {
			Usage()
			return
		}
		factory86 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt87 := factory86.GetProtocol(mbTrans84)
		argvalue2 := file_system_master.NewMountTOptions()
		err88 := argvalue2.Read(jsProt87)
		if err88 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.Mount(value0, value1, value2))
		fmt.Print("\n")
		break
	case "remove":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Remove requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		fmt.Print(client.Remove(value0, value1))
		fmt.Print("\n")
		break
	case "rename":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Rename requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Rename(value0, value1))
		fmt.Print("\n")
		break
	case "setAttribute":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetAttribute requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg94 := flag.Arg(2)
		mbTrans95 := thrift.NewTMemoryBufferLen(len(arg94))
		defer mbTrans95.Close()
		_, err96 := mbTrans95.WriteString(arg94)
		if err96 != nil {
			Usage()
			return
		}
		factory97 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt98 := factory97.GetProtocol(mbTrans95)
		argvalue1 := file_system_master.NewSetAttributeTOptions()
		err99 := argvalue1.Read(jsProt98)
		if err99 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetAttribute(value0, value1))
		fmt.Print("\n")
		break
	case "scheduleAsyncPersist":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduleAsyncPersist requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ScheduleAsyncPersist(value0))
		fmt.Print("\n")
		break
	case "unmount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Unmount requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.Unmount(value0))
		fmt.Print("\n")
		break
	case "getServiceVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceVersion())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
