// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package block_worker

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__

type BlockWorkerClientService interface {
	common.AlluxioService

	// Accesses a block given the block id.
	//
	// Parameters:
	//  - BlockId: the id of the block being accessed
	AccessBlock(blockId int64) (err error)
	// Asynchronously checkpoints a file: returns whether the checkpoint operation succeeded.
	//
	// Parameters:
	//  - FileId: the id of the file being accessed
	AsyncCheckpoint(fileId int64) (r bool, err error)
	// Used to cache a block into Alluxio space, worker will move the temporary block file from session
	// folder to data folder, and update the space usage information related. then update the block
	// information to master.
	//
	// Parameters:
	//  - SessionId: the id of the current session
	//  - BlockId: the id of the block being accessed
	CacheBlock(sessionId int64, blockId int64) (err error)
	// Used to cancel a block which is being written. worker will delete the temporary block file and
	// the location and space information related, then reclaim space allocated to the block.
	//
	// Parameters:
	//  - SessionId: the id of the current session
	//  - BlockId: the id of the block being accessed
	CancelBlock(sessionId int64, blockId int64) (err error)
	// Locks the file in Alluxio's space while the session is reading it. If lock succeeds, the path of
	// the block's file along with the internal lock id of locked block will be returned. If the block's file
	// is not found, FileDoesNotExistException will be thrown.
	//
	// Parameters:
	//  - BlockId: the id of the block being accessed
	//  - SessionId: the id of the current session
	LockBlock(blockId int64, sessionId int64) (r *LockBlockResult_, err error)
	// Used to promote block on under storage layer to top storage layer when there are more than one
	// storage layers in Alluxio's space. return true if the block is successfully promoted, false
	// otherwise.
	//
	// Parameters:
	//  - BlockId: the id of the block being accessed
	PromoteBlock(blockId int64) (r bool, err error)
	// Used to allocate location and space for a new coming block, worker will choose the appropriate
	// storage directory which fits the initial block size by some allocation strategy, and the
	// temporary file path of the block file will be returned. if there is no enough space on Alluxio
	// storage OutOfSpaceException will be thrown, if the file is already being written by the session,
	// FileAlreadyExistsException will be thrown.
	//
	// Parameters:
	//  - SessionId: the id of the current session
	//  - BlockId: the id of the block being accessed
	//  - InitialBytes: initial number of bytes requested
	RequestBlockLocation(sessionId int64, blockId int64, initialBytes int64) (r string, err error)
	// Used to request space for some block file. return true if the worker successfully allocates
	// space for the block on blockâ€™s location, false if there is no enough space, if there is no
	// information of the block on worker, FileDoesNotExistException will be thrown.
	//
	// Parameters:
	//  - SessionId: the id of the current session
	//  - BlockId: the id of the block being accessed
	//  - RequestBytes: the number of bytes requested
	RequestSpace(sessionId int64, blockId int64, requestBytes int64) (r bool, err error)
	// Local session send heartbeat to local worker to keep its temporary folder. It also sends client
	// metrics to the worker.
	//
	// Parameters:
	//  - SessionId: the id of the current session
	//  - Metrics: the client metrics
	SessionHeartbeat(sessionId int64, metrics []int64) (err error)
	// Used to unlock a block after the block is accessed, if the block is to be removed, delete the
	// block file. return true if successfully unlock the block, return false if the block is not
	// found or failed to delete the block.
	//
	// Parameters:
	//  - BlockId: the id of the block being accessed
	//  - SessionId: the id of the current session
	UnlockBlock(blockId int64, sessionId int64) (r bool, err error)
}

type BlockWorkerClientServiceClient struct {
	*common.AlluxioServiceClient
}

func NewBlockWorkerClientServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlockWorkerClientServiceClient {
	return &BlockWorkerClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientFactory(t, f)}
}

func NewBlockWorkerClientServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlockWorkerClientServiceClient {
	return &BlockWorkerClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientProtocol(t, iprot, oprot)}
}

// Accesses a block given the block id.
//
// Parameters:
//  - BlockId: the id of the block being accessed
func (p *BlockWorkerClientServiceClient) AccessBlock(blockId int64) (err error) {
	if err = p.sendAccessBlock(blockId); err != nil {
		return
	}
	return p.recvAccessBlock()
}

func (p *BlockWorkerClientServiceClient) sendAccessBlock(blockId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("accessBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceAccessBlockArgs{
		BlockId: blockId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvAccessBlock() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "accessBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "accessBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "accessBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "accessBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceAccessBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Asynchronously checkpoints a file: returns whether the checkpoint operation succeeded.
//
// Parameters:
//  - FileId: the id of the file being accessed
func (p *BlockWorkerClientServiceClient) AsyncCheckpoint(fileId int64) (r bool, err error) {
	if err = p.sendAsyncCheckpoint(fileId); err != nil {
		return
	}
	return p.recvAsyncCheckpoint()
}

func (p *BlockWorkerClientServiceClient) sendAsyncCheckpoint(fileId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("asyncCheckpoint", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceAsyncCheckpointArgs{
		FileId: fileId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvAsyncCheckpoint() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "asyncCheckpoint" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "asyncCheckpoint failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "asyncCheckpoint failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "asyncCheckpoint failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceAsyncCheckpointResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Used to cache a block into Alluxio space, worker will move the temporary block file from session
// folder to data folder, and update the space usage information related. then update the block
// information to master.
//
// Parameters:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
func (p *BlockWorkerClientServiceClient) CacheBlock(sessionId int64, blockId int64) (err error) {
	if err = p.sendCacheBlock(sessionId, blockId); err != nil {
		return
	}
	return p.recvCacheBlock()
}

func (p *BlockWorkerClientServiceClient) sendCacheBlock(sessionId int64, blockId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cacheBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceCacheBlockArgs{
		SessionId: sessionId,
		BlockId:   blockId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvCacheBlock() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cacheBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cacheBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cacheBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cacheBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceCacheBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Used to cancel a block which is being written. worker will delete the temporary block file and
// the location and space information related, then reclaim space allocated to the block.
//
// Parameters:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
func (p *BlockWorkerClientServiceClient) CancelBlock(sessionId int64, blockId int64) (err error) {
	if err = p.sendCancelBlock(sessionId, blockId); err != nil {
		return
	}
	return p.recvCancelBlock()
}

func (p *BlockWorkerClientServiceClient) sendCancelBlock(sessionId int64, blockId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancelBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceCancelBlockArgs{
		SessionId: sessionId,
		BlockId:   blockId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvCancelBlock() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cancelBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceCancelBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	return
}

// Locks the file in Alluxio's space while the session is reading it. If lock succeeds, the path of
// the block's file along with the internal lock id of locked block will be returned. If the block's file
// is not found, FileDoesNotExistException will be thrown.
//
// Parameters:
//  - BlockId: the id of the block being accessed
//  - SessionId: the id of the current session
func (p *BlockWorkerClientServiceClient) LockBlock(blockId int64, sessionId int64) (r *LockBlockResult_, err error) {
	if err = p.sendLockBlock(blockId, sessionId); err != nil {
		return
	}
	return p.recvLockBlock()
}

func (p *BlockWorkerClientServiceClient) sendLockBlock(blockId int64, sessionId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("lockBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceLockBlockArgs{
		BlockId:   blockId,
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvLockBlock() (value *LockBlockResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "lockBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "lockBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "lockBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "lockBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceLockBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Used to promote block on under storage layer to top storage layer when there are more than one
// storage layers in Alluxio's space. return true if the block is successfully promoted, false
// otherwise.
//
// Parameters:
//  - BlockId: the id of the block being accessed
func (p *BlockWorkerClientServiceClient) PromoteBlock(blockId int64) (r bool, err error) {
	if err = p.sendPromoteBlock(blockId); err != nil {
		return
	}
	return p.recvPromoteBlock()
}

func (p *BlockWorkerClientServiceClient) sendPromoteBlock(blockId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("promoteBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServicePromoteBlockArgs{
		BlockId: blockId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvPromoteBlock() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "promoteBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "promoteBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "promoteBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "promoteBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServicePromoteBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	value = result.GetSuccess()
	return
}

// Used to allocate location and space for a new coming block, worker will choose the appropriate
// storage directory which fits the initial block size by some allocation strategy, and the
// temporary file path of the block file will be returned. if there is no enough space on Alluxio
// storage OutOfSpaceException will be thrown, if the file is already being written by the session,
// FileAlreadyExistsException will be thrown.
//
// Parameters:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
//  - InitialBytes: initial number of bytes requested
func (p *BlockWorkerClientServiceClient) RequestBlockLocation(sessionId int64, blockId int64, initialBytes int64) (r string, err error) {
	if err = p.sendRequestBlockLocation(sessionId, blockId, initialBytes); err != nil {
		return
	}
	return p.recvRequestBlockLocation()
}

func (p *BlockWorkerClientServiceClient) sendRequestBlockLocation(sessionId int64, blockId int64, initialBytes int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("requestBlockLocation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceRequestBlockLocationArgs{
		SessionId:    sessionId,
		BlockId:      blockId,
		InitialBytes: initialBytes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvRequestBlockLocation() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "requestBlockLocation" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "requestBlockLocation failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestBlockLocation failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "requestBlockLocation failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceRequestBlockLocationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	value = result.GetSuccess()
	return
}

// Used to request space for some block file. return true if the worker successfully allocates
// space for the block on blockâ€™s location, false if there is no enough space, if there is no
// information of the block on worker, FileDoesNotExistException will be thrown.
//
// Parameters:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
//  - RequestBytes: the number of bytes requested
func (p *BlockWorkerClientServiceClient) RequestSpace(sessionId int64, blockId int64, requestBytes int64) (r bool, err error) {
	if err = p.sendRequestSpace(sessionId, blockId, requestBytes); err != nil {
		return
	}
	return p.recvRequestSpace()
}

func (p *BlockWorkerClientServiceClient) sendRequestSpace(sessionId int64, blockId int64, requestBytes int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("requestSpace", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceRequestSpaceArgs{
		SessionId:    sessionId,
		BlockId:      blockId,
		RequestBytes: requestBytes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvRequestSpace() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "requestSpace" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "requestSpace failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "requestSpace failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "requestSpace failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceRequestSpaceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Local session send heartbeat to local worker to keep its temporary folder. It also sends client
// metrics to the worker.
//
// Parameters:
//  - SessionId: the id of the current session
//  - Metrics: the client metrics
func (p *BlockWorkerClientServiceClient) SessionHeartbeat(sessionId int64, metrics []int64) (err error) {
	if err = p.sendSessionHeartbeat(sessionId, metrics); err != nil {
		return
	}
	return p.recvSessionHeartbeat()
}

func (p *BlockWorkerClientServiceClient) sendSessionHeartbeat(sessionId int64, metrics []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sessionHeartbeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceSessionHeartbeatArgs{
		SessionId: sessionId,
		Metrics:   metrics,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvSessionHeartbeat() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sessionHeartbeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sessionHeartbeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sessionHeartbeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sessionHeartbeat failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceSessionHeartbeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Used to unlock a block after the block is accessed, if the block is to be removed, delete the
// block file. return true if successfully unlock the block, return false if the block is not
// found or failed to delete the block.
//
// Parameters:
//  - BlockId: the id of the block being accessed
//  - SessionId: the id of the current session
func (p *BlockWorkerClientServiceClient) UnlockBlock(blockId int64, sessionId int64) (r bool, err error) {
	if err = p.sendUnlockBlock(blockId, sessionId); err != nil {
		return
	}
	return p.recvUnlockBlock()
}

func (p *BlockWorkerClientServiceClient) sendUnlockBlock(blockId int64, sessionId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unlockBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockWorkerClientServiceUnlockBlockArgs{
		BlockId:   blockId,
		SessionId: sessionId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockWorkerClientServiceClient) recvUnlockBlock() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unlockBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unlockBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unlockBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unlockBlock failed: invalid message type")
		return
	}
	result := BlockWorkerClientServiceUnlockBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type BlockWorkerClientServiceProcessor struct {
	*common.AlluxioServiceProcessor
}

func NewBlockWorkerClientServiceProcessor(handler BlockWorkerClientService) *BlockWorkerClientServiceProcessor {
	self20 := &BlockWorkerClientServiceProcessor{common.NewAlluxioServiceProcessor(handler)}
	self20.AddToProcessorMap("accessBlock", &blockWorkerClientServiceProcessorAccessBlock{handler: handler})
	self20.AddToProcessorMap("asyncCheckpoint", &blockWorkerClientServiceProcessorAsyncCheckpoint{handler: handler})
	self20.AddToProcessorMap("cacheBlock", &blockWorkerClientServiceProcessorCacheBlock{handler: handler})
	self20.AddToProcessorMap("cancelBlock", &blockWorkerClientServiceProcessorCancelBlock{handler: handler})
	self20.AddToProcessorMap("lockBlock", &blockWorkerClientServiceProcessorLockBlock{handler: handler})
	self20.AddToProcessorMap("promoteBlock", &blockWorkerClientServiceProcessorPromoteBlock{handler: handler})
	self20.AddToProcessorMap("requestBlockLocation", &blockWorkerClientServiceProcessorRequestBlockLocation{handler: handler})
	self20.AddToProcessorMap("requestSpace", &blockWorkerClientServiceProcessorRequestSpace{handler: handler})
	self20.AddToProcessorMap("sessionHeartbeat", &blockWorkerClientServiceProcessorSessionHeartbeat{handler: handler})
	self20.AddToProcessorMap("unlockBlock", &blockWorkerClientServiceProcessorUnlockBlock{handler: handler})
	return self20
}

type blockWorkerClientServiceProcessorAccessBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorAccessBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceAccessBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("accessBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceAccessBlockResult{}
	var err2 error
	if err2 = p.handler.AccessBlock(args.BlockId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing accessBlock: "+err2.Error())
		oprot.WriteMessageBegin("accessBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("accessBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorAsyncCheckpoint struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorAsyncCheckpoint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceAsyncCheckpointArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("asyncCheckpoint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceAsyncCheckpointResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AsyncCheckpoint(args.FileId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing asyncCheckpoint: "+err2.Error())
			oprot.WriteMessageBegin("asyncCheckpoint", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("asyncCheckpoint", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorCacheBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorCacheBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceCacheBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cacheBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceCacheBlockResult{}
	var err2 error
	if err2 = p.handler.CacheBlock(args.SessionId, args.BlockId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cacheBlock: "+err2.Error())
			oprot.WriteMessageBegin("cacheBlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cacheBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorCancelBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorCancelBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceCancelBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceCancelBlockResult{}
	var err2 error
	if err2 = p.handler.CancelBlock(args.SessionId, args.BlockId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelBlock: "+err2.Error())
			oprot.WriteMessageBegin("cancelBlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancelBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorLockBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorLockBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceLockBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("lockBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceLockBlockResult{}
	var retval *LockBlockResult_
	var err2 error
	if retval, err2 = p.handler.LockBlock(args.BlockId, args.SessionId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing lockBlock: "+err2.Error())
			oprot.WriteMessageBegin("lockBlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("lockBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorPromoteBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorPromoteBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServicePromoteBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("promoteBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServicePromoteBlockResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.PromoteBlock(args.BlockId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing promoteBlock: "+err2.Error())
			oprot.WriteMessageBegin("promoteBlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("promoteBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorRequestBlockLocation struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorRequestBlockLocation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceRequestBlockLocationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestBlockLocation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceRequestBlockLocationResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.RequestBlockLocation(args.SessionId, args.BlockId, args.InitialBytes); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestBlockLocation: "+err2.Error())
			oprot.WriteMessageBegin("requestBlockLocation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("requestBlockLocation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorRequestSpace struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorRequestSpace) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceRequestSpaceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("requestSpace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceRequestSpaceResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.RequestSpace(args.SessionId, args.BlockId, args.RequestBytes); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestSpace: "+err2.Error())
			oprot.WriteMessageBegin("requestSpace", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("requestSpace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorSessionHeartbeat struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorSessionHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceSessionHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sessionHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceSessionHeartbeatResult{}
	var err2 error
	if err2 = p.handler.SessionHeartbeat(args.SessionId, args.Metrics); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sessionHeartbeat: "+err2.Error())
		oprot.WriteMessageBegin("sessionHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("sessionHeartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockWorkerClientServiceProcessorUnlockBlock struct {
	handler BlockWorkerClientService
}

func (p *blockWorkerClientServiceProcessorUnlockBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockWorkerClientServiceUnlockBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unlockBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockWorkerClientServiceUnlockBlockResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.UnlockBlock(args.BlockId, args.SessionId); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unlockBlock: "+err2.Error())
		oprot.WriteMessageBegin("unlockBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unlockBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BlockId: the id of the block being accessed
type BlockWorkerClientServiceAccessBlockArgs struct {
	BlockId int64 `thrift:"blockId,1" json:"blockId"`
}

func NewBlockWorkerClientServiceAccessBlockArgs() *BlockWorkerClientServiceAccessBlockArgs {
	return &BlockWorkerClientServiceAccessBlockArgs{}
}

func (p *BlockWorkerClientServiceAccessBlockArgs) GetBlockId() int64 {
	return p.BlockId
}
func (p *BlockWorkerClientServiceAccessBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAccessBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceAccessBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("accessBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAccessBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceAccessBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceAccessBlockArgs(%+v)", *p)
}

type BlockWorkerClientServiceAccessBlockResult struct {
}

func NewBlockWorkerClientServiceAccessBlockResult() *BlockWorkerClientServiceAccessBlockResult {
	return &BlockWorkerClientServiceAccessBlockResult{}
}

func (p *BlockWorkerClientServiceAccessBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAccessBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("accessBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAccessBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceAccessBlockResult(%+v)", *p)
}

// Attributes:
//  - FileId: the id of the file being accessed
type BlockWorkerClientServiceAsyncCheckpointArgs struct {
	FileId int64 `thrift:"fileId,1" json:"fileId"`
}

func NewBlockWorkerClientServiceAsyncCheckpointArgs() *BlockWorkerClientServiceAsyncCheckpointArgs {
	return &BlockWorkerClientServiceAsyncCheckpointArgs{}
}

func (p *BlockWorkerClientServiceAsyncCheckpointArgs) GetFileId() int64 {
	return p.FileId
}
func (p *BlockWorkerClientServiceAsyncCheckpointArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("asyncCheckpoint_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fileId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fileId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceAsyncCheckpointArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceAsyncCheckpointArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BlockWorkerClientServiceAsyncCheckpointResult struct {
	Success *bool                        `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockWorkerClientServiceAsyncCheckpointResult() *BlockWorkerClientServiceAsyncCheckpointResult {
	return &BlockWorkerClientServiceAsyncCheckpointResult{}
}

var BlockWorkerClientServiceAsyncCheckpointResult_Success_DEFAULT bool

func (p *BlockWorkerClientServiceAsyncCheckpointResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServiceAsyncCheckpointResult_Success_DEFAULT
	}
	return *p.Success
}

var BlockWorkerClientServiceAsyncCheckpointResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceAsyncCheckpointResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceAsyncCheckpointResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockWorkerClientServiceAsyncCheckpointResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("asyncCheckpoint_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceAsyncCheckpointResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceAsyncCheckpointResult(%+v)", *p)
}

// Attributes:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
type BlockWorkerClientServiceCacheBlockArgs struct {
	SessionId int64 `thrift:"sessionId,1" json:"sessionId"`
	BlockId   int64 `thrift:"blockId,2" json:"blockId"`
}

func NewBlockWorkerClientServiceCacheBlockArgs() *BlockWorkerClientServiceCacheBlockArgs {
	return &BlockWorkerClientServiceCacheBlockArgs{}
}

func (p *BlockWorkerClientServiceCacheBlockArgs) GetSessionId() int64 {
	return p.SessionId
}

func (p *BlockWorkerClientServiceCacheBlockArgs) GetBlockId() int64 {
	return p.BlockId
}
func (p *BlockWorkerClientServiceCacheBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cacheBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceCacheBlockArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceCacheBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceCacheBlockArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type BlockWorkerClientServiceCacheBlockResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewBlockWorkerClientServiceCacheBlockResult() *BlockWorkerClientServiceCacheBlockResult {
	return &BlockWorkerClientServiceCacheBlockResult{}
}

var BlockWorkerClientServiceCacheBlockResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceCacheBlockResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceCacheBlockResult_E_DEFAULT
	}
	return p.E
}

var BlockWorkerClientServiceCacheBlockResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *BlockWorkerClientServiceCacheBlockResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return BlockWorkerClientServiceCacheBlockResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *BlockWorkerClientServiceCacheBlockResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cacheBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCacheBlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceCacheBlockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceCacheBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceCacheBlockResult(%+v)", *p)
}

// Attributes:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
type BlockWorkerClientServiceCancelBlockArgs struct {
	SessionId int64 `thrift:"sessionId,1" json:"sessionId"`
	BlockId   int64 `thrift:"blockId,2" json:"blockId"`
}

func NewBlockWorkerClientServiceCancelBlockArgs() *BlockWorkerClientServiceCancelBlockArgs {
	return &BlockWorkerClientServiceCancelBlockArgs{}
}

func (p *BlockWorkerClientServiceCancelBlockArgs) GetSessionId() int64 {
	return p.SessionId
}

func (p *BlockWorkerClientServiceCancelBlockArgs) GetBlockId() int64 {
	return p.BlockId
}
func (p *BlockWorkerClientServiceCancelBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceCancelBlockArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceCancelBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceCancelBlockArgs(%+v)", *p)
}

// Attributes:
//  - E
//  - Ioe
type BlockWorkerClientServiceCancelBlockResult struct {
	E   *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewBlockWorkerClientServiceCancelBlockResult() *BlockWorkerClientServiceCancelBlockResult {
	return &BlockWorkerClientServiceCancelBlockResult{}
}

var BlockWorkerClientServiceCancelBlockResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceCancelBlockResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceCancelBlockResult_E_DEFAULT
	}
	return p.E
}

var BlockWorkerClientServiceCancelBlockResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *BlockWorkerClientServiceCancelBlockResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return BlockWorkerClientServiceCancelBlockResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *BlockWorkerClientServiceCancelBlockResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceCancelBlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceCancelBlockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceCancelBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceCancelBlockResult(%+v)", *p)
}

// Attributes:
//  - BlockId: the id of the block being accessed
//  - SessionId: the id of the current session
type BlockWorkerClientServiceLockBlockArgs struct {
	BlockId   int64 `thrift:"blockId,1" json:"blockId"`
	SessionId int64 `thrift:"sessionId,2" json:"sessionId"`
}

func NewBlockWorkerClientServiceLockBlockArgs() *BlockWorkerClientServiceLockBlockArgs {
	return &BlockWorkerClientServiceLockBlockArgs{}
}

func (p *BlockWorkerClientServiceLockBlockArgs) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockWorkerClientServiceLockBlockArgs) GetSessionId() int64 {
	return p.SessionId
}
func (p *BlockWorkerClientServiceLockBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceLockBlockArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceLockBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceLockBlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BlockWorkerClientServiceLockBlockResult struct {
	Success *LockBlockResult_            `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockWorkerClientServiceLockBlockResult() *BlockWorkerClientServiceLockBlockResult {
	return &BlockWorkerClientServiceLockBlockResult{}
}

var BlockWorkerClientServiceLockBlockResult_Success_DEFAULT *LockBlockResult_

func (p *BlockWorkerClientServiceLockBlockResult) GetSuccess() *LockBlockResult_ {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServiceLockBlockResult_Success_DEFAULT
	}
	return p.Success
}

var BlockWorkerClientServiceLockBlockResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceLockBlockResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceLockBlockResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockWorkerClientServiceLockBlockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServiceLockBlockResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceLockBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &LockBlockResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("lockBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceLockBlockResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceLockBlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceLockBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceLockBlockResult(%+v)", *p)
}

// Attributes:
//  - BlockId: the id of the block being accessed
type BlockWorkerClientServicePromoteBlockArgs struct {
	BlockId int64 `thrift:"blockId,1" json:"blockId"`
}

func NewBlockWorkerClientServicePromoteBlockArgs() *BlockWorkerClientServicePromoteBlockArgs {
	return &BlockWorkerClientServicePromoteBlockArgs{}
}

func (p *BlockWorkerClientServicePromoteBlockArgs) GetBlockId() int64 {
	return p.BlockId
}
func (p *BlockWorkerClientServicePromoteBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("promoteBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServicePromoteBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServicePromoteBlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
//  - Ioe
type BlockWorkerClientServicePromoteBlockResult struct {
	Success *bool                        `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe     *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewBlockWorkerClientServicePromoteBlockResult() *BlockWorkerClientServicePromoteBlockResult {
	return &BlockWorkerClientServicePromoteBlockResult{}
}

var BlockWorkerClientServicePromoteBlockResult_Success_DEFAULT bool

func (p *BlockWorkerClientServicePromoteBlockResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServicePromoteBlockResult_Success_DEFAULT
	}
	return *p.Success
}

var BlockWorkerClientServicePromoteBlockResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServicePromoteBlockResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServicePromoteBlockResult_E_DEFAULT
	}
	return p.E
}

var BlockWorkerClientServicePromoteBlockResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *BlockWorkerClientServicePromoteBlockResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return BlockWorkerClientServicePromoteBlockResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *BlockWorkerClientServicePromoteBlockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("promoteBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServicePromoteBlockResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServicePromoteBlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServicePromoteBlockResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServicePromoteBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServicePromoteBlockResult(%+v)", *p)
}

// Attributes:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
//  - InitialBytes: initial number of bytes requested
type BlockWorkerClientServiceRequestBlockLocationArgs struct {
	SessionId    int64 `thrift:"sessionId,1" json:"sessionId"`
	BlockId      int64 `thrift:"blockId,2" json:"blockId"`
	InitialBytes int64 `thrift:"initialBytes,3" json:"initialBytes"`
}

func NewBlockWorkerClientServiceRequestBlockLocationArgs() *BlockWorkerClientServiceRequestBlockLocationArgs {
	return &BlockWorkerClientServiceRequestBlockLocationArgs{}
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) GetSessionId() int64 {
	return p.SessionId
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) GetInitialBytes() int64 {
	return p.InitialBytes
}
func (p *BlockWorkerClientServiceRequestBlockLocationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InitialBytes = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestBlockLocation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("initialBytes", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:initialBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.InitialBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.initialBytes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:initialBytes: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceRequestBlockLocationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
//  - Ioe
type BlockWorkerClientServiceRequestBlockLocationResult struct {
	Success *string                      `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe     *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewBlockWorkerClientServiceRequestBlockLocationResult() *BlockWorkerClientServiceRequestBlockLocationResult {
	return &BlockWorkerClientServiceRequestBlockLocationResult{}
}

var BlockWorkerClientServiceRequestBlockLocationResult_Success_DEFAULT string

func (p *BlockWorkerClientServiceRequestBlockLocationResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServiceRequestBlockLocationResult_Success_DEFAULT
	}
	return *p.Success
}

var BlockWorkerClientServiceRequestBlockLocationResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceRequestBlockLocationResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceRequestBlockLocationResult_E_DEFAULT
	}
	return p.E
}

var BlockWorkerClientServiceRequestBlockLocationResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *BlockWorkerClientServiceRequestBlockLocationResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return BlockWorkerClientServiceRequestBlockLocationResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *BlockWorkerClientServiceRequestBlockLocationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestBlockLocation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceRequestBlockLocationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceRequestBlockLocationResult(%+v)", *p)
}

// Attributes:
//  - SessionId: the id of the current session
//  - BlockId: the id of the block being accessed
//  - RequestBytes: the number of bytes requested
type BlockWorkerClientServiceRequestSpaceArgs struct {
	SessionId    int64 `thrift:"sessionId,1" json:"sessionId"`
	BlockId      int64 `thrift:"blockId,2" json:"blockId"`
	RequestBytes int64 `thrift:"requestBytes,3" json:"requestBytes"`
}

func NewBlockWorkerClientServiceRequestSpaceArgs() *BlockWorkerClientServiceRequestSpaceArgs {
	return &BlockWorkerClientServiceRequestSpaceArgs{}
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) GetSessionId() int64 {
	return p.SessionId
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) GetRequestBytes() int64 {
	return p.RequestBytes
}
func (p *BlockWorkerClientServiceRequestSpaceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RequestBytes = v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestSpace_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestBytes", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requestBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RequestBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requestBytes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requestBytes: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceRequestSpaceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceRequestSpaceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BlockWorkerClientServiceRequestSpaceResult struct {
	Success *bool                        `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockWorkerClientServiceRequestSpaceResult() *BlockWorkerClientServiceRequestSpaceResult {
	return &BlockWorkerClientServiceRequestSpaceResult{}
}

var BlockWorkerClientServiceRequestSpaceResult_Success_DEFAULT bool

func (p *BlockWorkerClientServiceRequestSpaceResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServiceRequestSpaceResult_Success_DEFAULT
	}
	return *p.Success
}

var BlockWorkerClientServiceRequestSpaceResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockWorkerClientServiceRequestSpaceResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockWorkerClientServiceRequestSpaceResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockWorkerClientServiceRequestSpaceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("requestSpace_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceRequestSpaceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceRequestSpaceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceRequestSpaceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceRequestSpaceResult(%+v)", *p)
}

// Attributes:
//  - SessionId: the id of the current session
//  - Metrics: the client metrics
type BlockWorkerClientServiceSessionHeartbeatArgs struct {
	SessionId int64   `thrift:"sessionId,1" json:"sessionId"`
	Metrics   []int64 `thrift:"metrics,2" json:"metrics"`
}

func NewBlockWorkerClientServiceSessionHeartbeatArgs() *BlockWorkerClientServiceSessionHeartbeatArgs {
	return &BlockWorkerClientServiceSessionHeartbeatArgs{}
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) GetSessionId() int64 {
	return p.SessionId
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) GetMetrics() []int64 {
	return p.Metrics
}
func (p *BlockWorkerClientServiceSessionHeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Metrics = tSlice
	for i := 0; i < size; i++ {
		var _elem21 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem21 = v
		}
		p.Metrics = append(p.Metrics, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sessionHeartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("metrics", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metrics: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Metrics)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Metrics {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metrics: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceSessionHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceSessionHeartbeatArgs(%+v)", *p)
}

type BlockWorkerClientServiceSessionHeartbeatResult struct {
}

func NewBlockWorkerClientServiceSessionHeartbeatResult() *BlockWorkerClientServiceSessionHeartbeatResult {
	return &BlockWorkerClientServiceSessionHeartbeatResult{}
}

func (p *BlockWorkerClientServiceSessionHeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sessionHeartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceSessionHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceSessionHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - BlockId: the id of the block being accessed
//  - SessionId: the id of the current session
type BlockWorkerClientServiceUnlockBlockArgs struct {
	BlockId   int64 `thrift:"blockId,1" json:"blockId"`
	SessionId int64 `thrift:"sessionId,2" json:"sessionId"`
}

func NewBlockWorkerClientServiceUnlockBlockArgs() *BlockWorkerClientServiceUnlockBlockArgs {
	return &BlockWorkerClientServiceUnlockBlockArgs{}
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) GetSessionId() int64 {
	return p.SessionId
}
func (p *BlockWorkerClientServiceUnlockBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SessionId = v
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlockBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err)
	}
	return err
}

func (p *BlockWorkerClientServiceUnlockBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceUnlockBlockArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockWorkerClientServiceUnlockBlockResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockWorkerClientServiceUnlockBlockResult() *BlockWorkerClientServiceUnlockBlockResult {
	return &BlockWorkerClientServiceUnlockBlockResult{}
}

var BlockWorkerClientServiceUnlockBlockResult_Success_DEFAULT bool

func (p *BlockWorkerClientServiceUnlockBlockResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return BlockWorkerClientServiceUnlockBlockResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BlockWorkerClientServiceUnlockBlockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockWorkerClientServiceUnlockBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unlockBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockWorkerClientServiceUnlockBlockResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockWorkerClientServiceUnlockBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockWorkerClientServiceUnlockBlockResult(%+v)", *p)
}
