// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package lineage_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__

type LineageMasterClientService interface {
	common.AlluxioService
	//This interface contains lineage master service endpoints for Alluxio clients.

	// Creates a lineage and returns the lineage id.
	//
	// Parameters:
	//  - InputFiles: the list of input files
	//  - OutputFiles: the list of output files
	//  - Job: the command line job info
	CreateLineage(inputFiles []string, outputFiles []string, job *CommandLineJobInfo) (r int64, err error)
	// Deletes a lineage and returns whether the deletion succeeded.
	//
	// Parameters:
	//  - LineageId: the lineage id
	//  - Cascade: whether to delete the lineage in cascade
	DeleteLineage(lineageId int64, cascade bool) (r bool, err error)
	// Returns a list of existing lineages.
	GetLineageInfoList() (r []*LineageInfo, err error)
	// Reinitializes a file. Returns the id of the reinitialized file when the
	// file is lost or not completed, -1 otherwise.
	//
	// Parameters:
	//  - Path: the path of the file
	//  - BlockSizeBytes: block size in bytes
	//  - TTL: time to live
	ReinitializeFile(path string, blockSizeBytes int64, ttl int64) (r int64, err error)
	// Reports file as lost.
	//
	// Parameters:
	//  - Path: the path of the file
	ReportLostFile(path string) (err error)
}

//This interface contains lineage master service endpoints for Alluxio clients.
type LineageMasterClientServiceClient struct {
	*common.AlluxioServiceClient
}

func NewLineageMasterClientServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LineageMasterClientServiceClient {
	return &LineageMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientFactory(t, f)}
}

func NewLineageMasterClientServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LineageMasterClientServiceClient {
	return &LineageMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientProtocol(t, iprot, oprot)}
}

// Creates a lineage and returns the lineage id.
//
// Parameters:
//  - InputFiles: the list of input files
//  - OutputFiles: the list of output files
//  - Job: the command line job info
func (p *LineageMasterClientServiceClient) CreateLineage(inputFiles []string, outputFiles []string, job *CommandLineJobInfo) (r int64, err error) {
	if err = p.sendCreateLineage(inputFiles, outputFiles, job); err != nil {
		return
	}
	return p.recvCreateLineage()
}

func (p *LineageMasterClientServiceClient) sendCreateLineage(inputFiles []string, outputFiles []string, job *CommandLineJobInfo) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createLineage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LineageMasterClientServiceCreateLineageArgs{
		InputFiles:  inputFiles,
		OutputFiles: outputFiles,
		Job:         job,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LineageMasterClientServiceClient) recvCreateLineage() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createLineage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createLineage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createLineage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createLineage failed: invalid message type")
		return
	}
	result := LineageMasterClientServiceCreateLineageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	} else if result.Ioe != nil {
		err = result.Ioe
		return
	}
	value = result.GetSuccess()
	return
}

// Deletes a lineage and returns whether the deletion succeeded.
//
// Parameters:
//  - LineageId: the lineage id
//  - Cascade: whether to delete the lineage in cascade
func (p *LineageMasterClientServiceClient) DeleteLineage(lineageId int64, cascade bool) (r bool, err error) {
	if err = p.sendDeleteLineage(lineageId, cascade); err != nil {
		return
	}
	return p.recvDeleteLineage()
}

func (p *LineageMasterClientServiceClient) sendDeleteLineage(lineageId int64, cascade bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteLineage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LineageMasterClientServiceDeleteLineageArgs{
		LineageId: lineageId,
		Cascade:   cascade,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LineageMasterClientServiceClient) recvDeleteLineage() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteLineage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteLineage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteLineage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteLineage failed: invalid message type")
		return
	}
	result := LineageMasterClientServiceDeleteLineageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of existing lineages.
func (p *LineageMasterClientServiceClient) GetLineageInfoList() (r []*LineageInfo, err error) {
	if err = p.sendGetLineageInfoList(); err != nil {
		return
	}
	return p.recvGetLineageInfoList()
}

func (p *LineageMasterClientServiceClient) sendGetLineageInfoList() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLineageInfoList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LineageMasterClientServiceGetLineageInfoListArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LineageMasterClientServiceClient) recvGetLineageInfoList() (value []*LineageInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLineageInfoList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLineageInfoList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLineageInfoList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLineageInfoList failed: invalid message type")
		return
	}
	result := LineageMasterClientServiceGetLineageInfoListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Reinitializes a file. Returns the id of the reinitialized file when the
// file is lost or not completed, -1 otherwise.
//
// Parameters:
//  - Path: the path of the file
//  - BlockSizeBytes: block size in bytes
//  - TTL: time to live
func (p *LineageMasterClientServiceClient) ReinitializeFile(path string, blockSizeBytes int64, ttl int64) (r int64, err error) {
	if err = p.sendReinitializeFile(path, blockSizeBytes, ttl); err != nil {
		return
	}
	return p.recvReinitializeFile()
}

func (p *LineageMasterClientServiceClient) sendReinitializeFile(path string, blockSizeBytes int64, ttl int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reinitializeFile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LineageMasterClientServiceReinitializeFileArgs{
		Path:           path,
		BlockSizeBytes: blockSizeBytes,
		TTL:            ttl,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LineageMasterClientServiceClient) recvReinitializeFile() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reinitializeFile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reinitializeFile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reinitializeFile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reinitializeFile failed: invalid message type")
		return
	}
	result := LineageMasterClientServiceReinitializeFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Reports file as lost.
//
// Parameters:
//  - Path: the path of the file
func (p *LineageMasterClientServiceClient) ReportLostFile(path string) (err error) {
	if err = p.sendReportLostFile(path); err != nil {
		return
	}
	return p.recvReportLostFile()
}

func (p *LineageMasterClientServiceClient) sendReportLostFile(path string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportLostFile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := LineageMasterClientServiceReportLostFileArgs{
		Path: path,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *LineageMasterClientServiceClient) recvReportLostFile() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportLostFile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportLostFile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportLostFile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportLostFile failed: invalid message type")
		return
	}
	result := LineageMasterClientServiceReportLostFileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type LineageMasterClientServiceProcessor struct {
	*common.AlluxioServiceProcessor
}

func NewLineageMasterClientServiceProcessor(handler LineageMasterClientService) *LineageMasterClientServiceProcessor {
	self14 := &LineageMasterClientServiceProcessor{common.NewAlluxioServiceProcessor(handler)}
	self14.AddToProcessorMap("createLineage", &lineageMasterClientServiceProcessorCreateLineage{handler: handler})
	self14.AddToProcessorMap("deleteLineage", &lineageMasterClientServiceProcessorDeleteLineage{handler: handler})
	self14.AddToProcessorMap("getLineageInfoList", &lineageMasterClientServiceProcessorGetLineageInfoList{handler: handler})
	self14.AddToProcessorMap("reinitializeFile", &lineageMasterClientServiceProcessorReinitializeFile{handler: handler})
	self14.AddToProcessorMap("reportLostFile", &lineageMasterClientServiceProcessorReportLostFile{handler: handler})
	return self14
}

type lineageMasterClientServiceProcessorCreateLineage struct {
	handler LineageMasterClientService
}

func (p *lineageMasterClientServiceProcessorCreateLineage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LineageMasterClientServiceCreateLineageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createLineage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LineageMasterClientServiceCreateLineageResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.CreateLineage(args.InputFiles, args.OutputFiles, args.Job); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		case *exception.ThriftIOException:
			result.Ioe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createLineage: "+err2.Error())
			oprot.WriteMessageBegin("createLineage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createLineage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lineageMasterClientServiceProcessorDeleteLineage struct {
	handler LineageMasterClientService
}

func (p *lineageMasterClientServiceProcessorDeleteLineage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LineageMasterClientServiceDeleteLineageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteLineage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LineageMasterClientServiceDeleteLineageResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.DeleteLineage(args.LineageId, args.Cascade); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteLineage: "+err2.Error())
			oprot.WriteMessageBegin("deleteLineage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteLineage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lineageMasterClientServiceProcessorGetLineageInfoList struct {
	handler LineageMasterClientService
}

func (p *lineageMasterClientServiceProcessorGetLineageInfoList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LineageMasterClientServiceGetLineageInfoListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLineageInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LineageMasterClientServiceGetLineageInfoListResult{}
	var retval []*LineageInfo
	var err2 error
	if retval, err2 = p.handler.GetLineageInfoList(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLineageInfoList: "+err2.Error())
		oprot.WriteMessageBegin("getLineageInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLineageInfoList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lineageMasterClientServiceProcessorReinitializeFile struct {
	handler LineageMasterClientService
}

func (p *lineageMasterClientServiceProcessorReinitializeFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LineageMasterClientServiceReinitializeFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reinitializeFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LineageMasterClientServiceReinitializeFileResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.ReinitializeFile(args.Path, args.BlockSizeBytes, args.TTL); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reinitializeFile: "+err2.Error())
			oprot.WriteMessageBegin("reinitializeFile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reinitializeFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lineageMasterClientServiceProcessorReportLostFile struct {
	handler LineageMasterClientService
}

func (p *lineageMasterClientServiceProcessorReportLostFile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LineageMasterClientServiceReportLostFileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportLostFile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := LineageMasterClientServiceReportLostFileResult{}
	var err2 error
	if err2 = p.handler.ReportLostFile(args.Path); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportLostFile: "+err2.Error())
			oprot.WriteMessageBegin("reportLostFile", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("reportLostFile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - InputFiles: the list of input files
//  - OutputFiles: the list of output files
//  - Job: the command line job info
type LineageMasterClientServiceCreateLineageArgs struct {
	InputFiles  []string            `thrift:"inputFiles,1" json:"inputFiles"`
	OutputFiles []string            `thrift:"outputFiles,2" json:"outputFiles"`
	Job         *CommandLineJobInfo `thrift:"job,3" json:"job"`
}

func NewLineageMasterClientServiceCreateLineageArgs() *LineageMasterClientServiceCreateLineageArgs {
	return &LineageMasterClientServiceCreateLineageArgs{}
}

func (p *LineageMasterClientServiceCreateLineageArgs) GetInputFiles() []string {
	return p.InputFiles
}

func (p *LineageMasterClientServiceCreateLineageArgs) GetOutputFiles() []string {
	return p.OutputFiles
}

var LineageMasterClientServiceCreateLineageArgs_Job_DEFAULT *CommandLineJobInfo

func (p *LineageMasterClientServiceCreateLineageArgs) GetJob() *CommandLineJobInfo {
	if !p.IsSetJob() {
		return LineageMasterClientServiceCreateLineageArgs_Job_DEFAULT
	}
	return p.Job
}
func (p *LineageMasterClientServiceCreateLineageArgs) IsSetJob() bool {
	return p.Job != nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InputFiles = tSlice
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem15 = v
		}
		p.InputFiles = append(p.InputFiles, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.OutputFiles = tSlice
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem16 = v
		}
		p.OutputFiles = append(p.OutputFiles, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) readField3(iprot thrift.TProtocol) error {
	p.Job = &CommandLineJobInfo{}
	if err := p.Job.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Job), err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLineage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputFiles", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputFiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InputFiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InputFiles {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputFiles: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputFiles", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:outputFiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputFiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.OutputFiles {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:outputFiles: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("job", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:job: ", p), err)
	}
	if err := p.Job.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Job), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:job: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceCreateLineageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
//  - Ioe
type LineageMasterClientServiceCreateLineageResult struct {
	Success *int64                       `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
	Ioe     *exception.ThriftIOException `thrift:"ioe,2" json:"ioe,omitempty"`
}

func NewLineageMasterClientServiceCreateLineageResult() *LineageMasterClientServiceCreateLineageResult {
	return &LineageMasterClientServiceCreateLineageResult{}
}

var LineageMasterClientServiceCreateLineageResult_Success_DEFAULT int64

func (p *LineageMasterClientServiceCreateLineageResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return LineageMasterClientServiceCreateLineageResult_Success_DEFAULT
	}
	return *p.Success
}

var LineageMasterClientServiceCreateLineageResult_E_DEFAULT *exception.AlluxioTException

func (p *LineageMasterClientServiceCreateLineageResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return LineageMasterClientServiceCreateLineageResult_E_DEFAULT
	}
	return p.E
}

var LineageMasterClientServiceCreateLineageResult_Ioe_DEFAULT *exception.ThriftIOException

func (p *LineageMasterClientServiceCreateLineageResult) GetIoe() *exception.ThriftIOException {
	if !p.IsSetIoe() {
		return LineageMasterClientServiceCreateLineageResult_Ioe_DEFAULT
	}
	return p.Ioe
}
func (p *LineageMasterClientServiceCreateLineageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LineageMasterClientServiceCreateLineageResult) IsSetE() bool {
	return p.E != nil
}

func (p *LineageMasterClientServiceCreateLineageResult) IsSetIoe() bool {
	return p.Ioe != nil
}

func (p *LineageMasterClientServiceCreateLineageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageResult) readField2(iprot thrift.TProtocol) error {
	p.Ioe = &exception.ThriftIOException{}
	if err := p.Ioe.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ioe), err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLineage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceCreateLineageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIoe() {
		if err := oprot.WriteFieldBegin("ioe", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioe: ", p), err)
		}
		if err := p.Ioe.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ioe), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioe: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceCreateLineageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceCreateLineageResult(%+v)", *p)
}

// Attributes:
//  - LineageId: the lineage id
//  - Cascade: whether to delete the lineage in cascade
type LineageMasterClientServiceDeleteLineageArgs struct {
	LineageId int64 `thrift:"lineageId,1" json:"lineageId"`
	Cascade   bool  `thrift:"cascade,2" json:"cascade"`
}

func NewLineageMasterClientServiceDeleteLineageArgs() *LineageMasterClientServiceDeleteLineageArgs {
	return &LineageMasterClientServiceDeleteLineageArgs{}
}

func (p *LineageMasterClientServiceDeleteLineageArgs) GetLineageId() int64 {
	return p.LineageId
}

func (p *LineageMasterClientServiceDeleteLineageArgs) GetCascade() bool {
	return p.Cascade
}
func (p *LineageMasterClientServiceDeleteLineageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LineageId = v
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cascade = v
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteLineage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lineageId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lineageId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LineageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lineageId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lineageId: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceDeleteLineageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cascade", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cascade: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Cascade)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cascade (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cascade: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceDeleteLineageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceDeleteLineageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LineageMasterClientServiceDeleteLineageResult struct {
	Success *bool                        `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewLineageMasterClientServiceDeleteLineageResult() *LineageMasterClientServiceDeleteLineageResult {
	return &LineageMasterClientServiceDeleteLineageResult{}
}

var LineageMasterClientServiceDeleteLineageResult_Success_DEFAULT bool

func (p *LineageMasterClientServiceDeleteLineageResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return LineageMasterClientServiceDeleteLineageResult_Success_DEFAULT
	}
	return *p.Success
}

var LineageMasterClientServiceDeleteLineageResult_E_DEFAULT *exception.AlluxioTException

func (p *LineageMasterClientServiceDeleteLineageResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return LineageMasterClientServiceDeleteLineageResult_E_DEFAULT
	}
	return p.E
}
func (p *LineageMasterClientServiceDeleteLineageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) IsSetE() bool {
	return p.E != nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteLineage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceDeleteLineageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceDeleteLineageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceDeleteLineageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceDeleteLineageResult(%+v)", *p)
}

type LineageMasterClientServiceGetLineageInfoListArgs struct {
}

func NewLineageMasterClientServiceGetLineageInfoListArgs() *LineageMasterClientServiceGetLineageInfoListArgs {
	return &LineageMasterClientServiceGetLineageInfoListArgs{}
}

func (p *LineageMasterClientServiceGetLineageInfoListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceGetLineageInfoListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLineageInfoList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceGetLineageInfoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceGetLineageInfoListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LineageMasterClientServiceGetLineageInfoListResult struct {
	Success []*LineageInfo `thrift:"success,0" json:"success,omitempty"`
}

func NewLineageMasterClientServiceGetLineageInfoListResult() *LineageMasterClientServiceGetLineageInfoListResult {
	return &LineageMasterClientServiceGetLineageInfoListResult{}
}

var LineageMasterClientServiceGetLineageInfoListResult_Success_DEFAULT []*LineageInfo

func (p *LineageMasterClientServiceGetLineageInfoListResult) GetSuccess() []*LineageInfo {
	return p.Success
}
func (p *LineageMasterClientServiceGetLineageInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LineageMasterClientServiceGetLineageInfoListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceGetLineageInfoListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*LineageInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem17 := &LineageInfo{}
		if err := _elem17.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
		}
		p.Success = append(p.Success, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceGetLineageInfoListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLineageInfoList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceGetLineageInfoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceGetLineageInfoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceGetLineageInfoListResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
//  - BlockSizeBytes: block size in bytes
//  - TTL: time to live
type LineageMasterClientServiceReinitializeFileArgs struct {
	Path           string `thrift:"path,1" json:"path"`
	BlockSizeBytes int64  `thrift:"blockSizeBytes,2" json:"blockSizeBytes"`
	TTL            int64  `thrift:"ttl,3" json:"ttl"`
}

func NewLineageMasterClientServiceReinitializeFileArgs() *LineageMasterClientServiceReinitializeFileArgs {
	return &LineageMasterClientServiceReinitializeFileArgs{}
}

func (p *LineageMasterClientServiceReinitializeFileArgs) GetPath() string {
	return p.Path
}

func (p *LineageMasterClientServiceReinitializeFileArgs) GetBlockSizeBytes() int64 {
	return p.BlockSizeBytes
}

func (p *LineageMasterClientServiceReinitializeFileArgs) GetTTL() int64 {
	return p.TTL
}
func (p *LineageMasterClientServiceReinitializeFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BlockSizeBytes = v
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TTL = v
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reinitializeFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceReinitializeFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockSizeBytes", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:blockSizeBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockSizeBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockSizeBytes (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:blockSizeBytes: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceReinitializeFileArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ttl", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ttl: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TTL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ttl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ttl: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceReinitializeFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceReinitializeFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type LineageMasterClientServiceReinitializeFileResult struct {
	Success *int64                       `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewLineageMasterClientServiceReinitializeFileResult() *LineageMasterClientServiceReinitializeFileResult {
	return &LineageMasterClientServiceReinitializeFileResult{}
}

var LineageMasterClientServiceReinitializeFileResult_Success_DEFAULT int64

func (p *LineageMasterClientServiceReinitializeFileResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return LineageMasterClientServiceReinitializeFileResult_Success_DEFAULT
	}
	return *p.Success
}

var LineageMasterClientServiceReinitializeFileResult_E_DEFAULT *exception.AlluxioTException

func (p *LineageMasterClientServiceReinitializeFileResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return LineageMasterClientServiceReinitializeFileResult_E_DEFAULT
	}
	return p.E
}
func (p *LineageMasterClientServiceReinitializeFileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reinitializeFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceReinitializeFileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceReinitializeFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceReinitializeFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceReinitializeFileResult(%+v)", *p)
}

// Attributes:
//  - Path: the path of the file
type LineageMasterClientServiceReportLostFileArgs struct {
	Path string `thrift:"path,1" json:"path"`
}

func NewLineageMasterClientServiceReportLostFileArgs() *LineageMasterClientServiceReportLostFileArgs {
	return &LineageMasterClientServiceReportLostFileArgs{}
}

func (p *LineageMasterClientServiceReportLostFileArgs) GetPath() string {
	return p.Path
}
func (p *LineageMasterClientServiceReportLostFileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportLostFile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err)
	}
	return err
}

func (p *LineageMasterClientServiceReportLostFileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceReportLostFileArgs(%+v)", *p)
}

// Attributes:
//  - E
type LineageMasterClientServiceReportLostFileResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewLineageMasterClientServiceReportLostFileResult() *LineageMasterClientServiceReportLostFileResult {
	return &LineageMasterClientServiceReportLostFileResult{}
}

var LineageMasterClientServiceReportLostFileResult_E_DEFAULT *exception.AlluxioTException

func (p *LineageMasterClientServiceReportLostFileResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return LineageMasterClientServiceReportLostFileResult_E_DEFAULT
	}
	return p.E
}
func (p *LineageMasterClientServiceReportLostFileResult) IsSetE() bool {
	return p.E != nil
}

func (p *LineageMasterClientServiceReportLostFileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportLostFile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LineageMasterClientServiceReportLostFileResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *LineageMasterClientServiceReportLostFileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LineageMasterClientServiceReportLostFileResult(%+v)", *p)
}
