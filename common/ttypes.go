// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package common

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type CommandType int64

const (
	CommandType_Unknown  CommandType = 0
	CommandType_Nothing  CommandType = 1
	CommandType_Register CommandType = 2
	CommandType_Free     CommandType = 3
	CommandType_Delete   CommandType = 4
	CommandType_Persist  CommandType = 5
)

func (p CommandType) String() string {
	switch p {
	case CommandType_Unknown:
		return "Unknown"
	case CommandType_Nothing:
		return "Nothing"
	case CommandType_Register:
		return "Register"
	case CommandType_Free:
		return "Free"
	case CommandType_Delete:
		return "Delete"
	case CommandType_Persist:
		return "Persist"
	}
	return "<UNSET>"
}

func CommandTypeFromString(s string) (CommandType, error) {
	switch s {
	case "Unknown":
		return CommandType_Unknown, nil
	case "Nothing":
		return CommandType_Nothing, nil
	case "Register":
		return CommandType_Register, nil
	case "Free":
		return CommandType_Free, nil
	case "Delete":
		return CommandType_Delete, nil
	case "Persist":
		return CommandType_Persist, nil
	}
	return CommandType(0), fmt.Errorf("not a valid CommandType string")
}

func CommandTypePtr(v CommandType) *CommandType { return &v }

func (p CommandType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CommandType) UnmarshalText(text []byte) error {
	q, err := CommandTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Contains the information of a block in Alluxio. It maintains the worker nodes where the replicas
// of the blocks are stored.
//
// Attributes:
//  - BlockId
//  - Length
//  - Locations
type BlockInfo struct {
	BlockId   int64            `thrift:"blockId,1" json:"blockId"`
	Length    int64            `thrift:"length,2" json:"length"`
	Locations []*BlockLocation `thrift:"locations,3" json:"locations"`
}

func NewBlockInfo() *BlockInfo {
	return &BlockInfo{}
}

func (p *BlockInfo) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockInfo) GetLength() int64 {
	return p.Length
}

func (p *BlockInfo) GetLocations() []*BlockLocation {
	return p.Locations
}
func (p *BlockInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *BlockInfo) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BlockLocation, 0, size)
	p.Locations = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &BlockLocation{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Locations = append(p.Locations, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BlockInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:length: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:length: ", p), err)
	}
	return err
}

func (p *BlockInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("locations", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Locations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Locations {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locations: ", p), err)
	}
	return err
}

func (p *BlockInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockInfo(%+v)", *p)
}

// Information about blocks.
//
// Attributes:
//  - WorkerId
//  - WorkerAddress
//  - TierAlias
type BlockLocation struct {
	WorkerId      int64             `thrift:"workerId,1" json:"workerId"`
	WorkerAddress *WorkerNetAddress `thrift:"workerAddress,2" json:"workerAddress"`
	TierAlias     string            `thrift:"tierAlias,3" json:"tierAlias"`
}

func NewBlockLocation() *BlockLocation {
	return &BlockLocation{}
}

func (p *BlockLocation) GetWorkerId() int64 {
	return p.WorkerId
}

var BlockLocation_WorkerAddress_DEFAULT WorkerNetAddress

func (p *BlockLocation) GetWorkerAddress() WorkerNetAddress {
	if !p.IsSetWorkerAddress() {
		return BlockLocation_WorkerAddress_DEFAULT
	}
	return *p.WorkerAddress
}

func (p *BlockLocation) GetTierAlias() string {
	return p.TierAlias
}
func (p *BlockLocation) IsSetWorkerAddress() bool {
	return p.WorkerAddress != nil
}

func (p *BlockLocation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockLocation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *BlockLocation) readField2(iprot thrift.TProtocol) error {
	p.WorkerAddress = &WorkerNetAddress{}
	if err := p.WorkerAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkerAddress), err)
	}
	return nil
}

func (p *BlockLocation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TierAlias = v
	}
	return nil
}

func (p *BlockLocation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BlockLocation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockLocation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WorkerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.workerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerId: ", p), err)
	}
	return err
}

func (p *BlockLocation) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerAddress", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:workerAddress: ", p), err)
	}
	if err := p.WorkerAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkerAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:workerAddress: ", p), err)
	}
	return err
}

func (p *BlockLocation) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tierAlias", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tierAlias: ", p), err)
	}
	if err := oprot.WriteString(string(p.TierAlias)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tierAlias (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tierAlias: ", p), err)
	}
	return err
}

func (p *BlockLocation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockLocation(%+v)", *p)
}

// Attributes:
//  - CommandType
//  - Data
type Command struct {
	CommandType CommandType `thrift:"commandType,1" json:"commandType"`
	Data        []int64     `thrift:"data,2" json:"data"`
}

func NewCommand() *Command {
	return &Command{}
}

func (p *Command) GetCommandType() CommandType {
	return p.CommandType
}

func (p *Command) GetData() []int64 {
	return p.Data
}
func (p *Command) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Command) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := CommandType(v)
		p.CommandType = temp
	}
	return nil
}

func (p *Command) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Data = tSlice
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Data = append(p.Data, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Command) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Command"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Command) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("commandType", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:commandType: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CommandType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.commandType (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:commandType: ", p), err)
	}
	return err
}

func (p *Command) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Data)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Data {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
	}
	return err
}

func (p *Command) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Command(%+v)", *p)
}

// Address information about workers.
//
// Attributes:
//  - Host
//  - RpcPort
//  - DataPort
//  - WebPort
type WorkerNetAddress struct {
	Host     string `thrift:"host,1" json:"host"`
	RpcPort  int32  `thrift:"rpcPort,2" json:"rpcPort"`
	DataPort int32  `thrift:"dataPort,3" json:"dataPort"`
	WebPort  int32  `thrift:"webPort,4" json:"webPort"`
}

func NewWorkerNetAddress() *WorkerNetAddress {
	return &WorkerNetAddress{}
}

func (p *WorkerNetAddress) GetHost() string {
	return p.Host
}

func (p *WorkerNetAddress) GetRpcPort() int32 {
	return p.RpcPort
}

func (p *WorkerNetAddress) GetDataPort() int32 {
	return p.DataPort
}

func (p *WorkerNetAddress) GetWebPort() int32 {
	return p.WebPort
}
func (p *WorkerNetAddress) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkerNetAddress) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Host = v
	}
	return nil
}

func (p *WorkerNetAddress) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RpcPort = v
	}
	return nil
}

func (p *WorkerNetAddress) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DataPort = v
	}
	return nil
}

func (p *WorkerNetAddress) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WebPort = v
	}
	return nil
}

func (p *WorkerNetAddress) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WorkerNetAddress"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerNetAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err)
	}
	if err := oprot.WriteString(string(p.Host)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err)
	}
	return err
}

func (p *WorkerNetAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rpcPort", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rpcPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RpcPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rpcPort (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rpcPort: ", p), err)
	}
	return err
}

func (p *WorkerNetAddress) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dataPort", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DataPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dataPort (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataPort: ", p), err)
	}
	return err
}

func (p *WorkerNetAddress) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("webPort", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:webPort: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.WebPort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.webPort (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:webPort: ", p), err)
	}
	return err
}

func (p *WorkerNetAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerNetAddress(%+v)", *p)
}

// Information about the RPC.
//
// Attributes:
//  - Key
type RpcOptions struct {
	Key *string `thrift:"key,1" json:"key,omitempty"`
}

func NewRpcOptions() *RpcOptions {
	return &RpcOptions{}
}

var RpcOptions_Key_DEFAULT string

func (p *RpcOptions) GetKey() string {
	if !p.IsSetKey() {
		return RpcOptions_Key_DEFAULT
	}
	return *p.Key
}
func (p *RpcOptions) IsSetKey() bool {
	return p.Key != nil
}

func (p *RpcOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RpcOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = &v
	}
	return nil
}

func (p *RpcOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RpcOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RpcOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Key)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
		}
	}
	return err
}

func (p *RpcOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RpcOptions(%+v)", *p)
}
