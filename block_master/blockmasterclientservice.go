// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package block_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__

type BlockMasterClientService interface {
	common.AlluxioService
	//This interface contains block master service endpoints for Alluxio clients.

	// Returns the block information for the given block id.
	//
	// Parameters:
	//  - BlockId: the id of the block
	GetBlockInfo(blockId int64) (r *common.BlockInfo, err error)
	// Returns the capacity (in bytes).
	GetCapacityBytes() (r int64, err error)
	// Returns the used storage (in bytes).
	GetUsedBytes() (r int64, err error)
	// Returns a list of workers information.
	GetWorkerInfoList() (r []*WorkerInfo, err error)
}

//This interface contains block master service endpoints for Alluxio clients.
type BlockMasterClientServiceClient struct {
	*common.AlluxioServiceClient
}

func NewBlockMasterClientServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlockMasterClientServiceClient {
	return &BlockMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientFactory(t, f)}
}

func NewBlockMasterClientServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlockMasterClientServiceClient {
	return &BlockMasterClientServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientProtocol(t, iprot, oprot)}
}

// Returns the block information for the given block id.
//
// Parameters:
//  - BlockId: the id of the block
func (p *BlockMasterClientServiceClient) GetBlockInfo(blockId int64) (r *common.BlockInfo, err error) {
	if err = p.sendGetBlockInfo(blockId); err != nil {
		return
	}
	return p.recvGetBlockInfo()
}

func (p *BlockMasterClientServiceClient) sendGetBlockInfo(blockId int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBlockInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterClientServiceGetBlockInfoArgs{
		BlockId: blockId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterClientServiceClient) recvGetBlockInfo() (value *common.BlockInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBlockInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBlockInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBlockInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBlockInfo failed: invalid message type")
		return
	}
	result := BlockMasterClientServiceGetBlockInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the capacity (in bytes).
func (p *BlockMasterClientServiceClient) GetCapacityBytes() (r int64, err error) {
	if err = p.sendGetCapacityBytes(); err != nil {
		return
	}
	return p.recvGetCapacityBytes()
}

func (p *BlockMasterClientServiceClient) sendGetCapacityBytes() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCapacityBytes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterClientServiceGetCapacityBytesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterClientServiceClient) recvGetCapacityBytes() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCapacityBytes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCapacityBytes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCapacityBytes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCapacityBytes failed: invalid message type")
		return
	}
	result := BlockMasterClientServiceGetCapacityBytesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the used storage (in bytes).
func (p *BlockMasterClientServiceClient) GetUsedBytes() (r int64, err error) {
	if err = p.sendGetUsedBytes(); err != nil {
		return
	}
	return p.recvGetUsedBytes()
}

func (p *BlockMasterClientServiceClient) sendGetUsedBytes() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUsedBytes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterClientServiceGetUsedBytesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterClientServiceClient) recvGetUsedBytes() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUsedBytes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUsedBytes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUsedBytes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUsedBytes failed: invalid message type")
		return
	}
	result := BlockMasterClientServiceGetUsedBytesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of workers information.
func (p *BlockMasterClientServiceClient) GetWorkerInfoList() (r []*WorkerInfo, err error) {
	if err = p.sendGetWorkerInfoList(); err != nil {
		return
	}
	return p.recvGetWorkerInfoList()
}

func (p *BlockMasterClientServiceClient) sendGetWorkerInfoList() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getWorkerInfoList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterClientServiceGetWorkerInfoListArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterClientServiceClient) recvGetWorkerInfoList() (value []*WorkerInfo, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getWorkerInfoList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getWorkerInfoList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWorkerInfoList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getWorkerInfoList failed: invalid message type")
		return
	}
	result := BlockMasterClientServiceGetWorkerInfoListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type BlockMasterClientServiceProcessor struct {
	*common.AlluxioServiceProcessor
}

func NewBlockMasterClientServiceProcessor(handler BlockMasterClientService) *BlockMasterClientServiceProcessor {
	self8 := &BlockMasterClientServiceProcessor{common.NewAlluxioServiceProcessor(handler)}
	self8.AddToProcessorMap("getBlockInfo", &blockMasterClientServiceProcessorGetBlockInfo{handler: handler})
	self8.AddToProcessorMap("getCapacityBytes", &blockMasterClientServiceProcessorGetCapacityBytes{handler: handler})
	self8.AddToProcessorMap("getUsedBytes", &blockMasterClientServiceProcessorGetUsedBytes{handler: handler})
	self8.AddToProcessorMap("getWorkerInfoList", &blockMasterClientServiceProcessorGetWorkerInfoList{handler: handler})
	return self8
}

type blockMasterClientServiceProcessorGetBlockInfo struct {
	handler BlockMasterClientService
}

func (p *blockMasterClientServiceProcessorGetBlockInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterClientServiceGetBlockInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBlockInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterClientServiceGetBlockInfoResult{}
	var retval *common.BlockInfo
	var err2 error
	if retval, err2 = p.handler.GetBlockInfo(args.BlockId); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockInfo: "+err2.Error())
			oprot.WriteMessageBegin("getBlockInfo", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBlockInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterClientServiceProcessorGetCapacityBytes struct {
	handler BlockMasterClientService
}

func (p *blockMasterClientServiceProcessorGetCapacityBytes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterClientServiceGetCapacityBytesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCapacityBytes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterClientServiceGetCapacityBytesResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetCapacityBytes(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCapacityBytes: "+err2.Error())
		oprot.WriteMessageBegin("getCapacityBytes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getCapacityBytes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterClientServiceProcessorGetUsedBytes struct {
	handler BlockMasterClientService
}

func (p *blockMasterClientServiceProcessorGetUsedBytes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterClientServiceGetUsedBytesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUsedBytes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterClientServiceGetUsedBytesResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetUsedBytes(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUsedBytes: "+err2.Error())
		oprot.WriteMessageBegin("getUsedBytes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getUsedBytes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterClientServiceProcessorGetWorkerInfoList struct {
	handler BlockMasterClientService
}

func (p *blockMasterClientServiceProcessorGetWorkerInfoList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterClientServiceGetWorkerInfoListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getWorkerInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterClientServiceGetWorkerInfoListResult{}
	var retval []*WorkerInfo
	var err2 error
	if retval, err2 = p.handler.GetWorkerInfoList(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkerInfoList: "+err2.Error())
		oprot.WriteMessageBegin("getWorkerInfoList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getWorkerInfoList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - BlockId: the id of the block
type BlockMasterClientServiceGetBlockInfoArgs struct {
	BlockId int64 `thrift:"blockId,1" json:"blockId"`
}

func NewBlockMasterClientServiceGetBlockInfoArgs() *BlockMasterClientServiceGetBlockInfoArgs {
	return &BlockMasterClientServiceGetBlockInfoArgs{}
}

func (p *BlockMasterClientServiceGetBlockInfoArgs) GetBlockId() int64 {
	return p.BlockId
}
func (p *BlockMasterClientServiceGetBlockInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:blockId: ", p), err)
	}
	return err
}

func (p *BlockMasterClientServiceGetBlockInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetBlockInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BlockMasterClientServiceGetBlockInfoResult struct {
	Success *common.BlockInfo            `thrift:"success,0" json:"success,omitempty"`
	E       *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockMasterClientServiceGetBlockInfoResult() *BlockMasterClientServiceGetBlockInfoResult {
	return &BlockMasterClientServiceGetBlockInfoResult{}
}

var BlockMasterClientServiceGetBlockInfoResult_Success_DEFAULT *common.BlockInfo

func (p *BlockMasterClientServiceGetBlockInfoResult) GetSuccess() *common.BlockInfo {
	if !p.IsSetSuccess() {
		return BlockMasterClientServiceGetBlockInfoResult_Success_DEFAULT
	}
	return p.Success
}

var BlockMasterClientServiceGetBlockInfoResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockMasterClientServiceGetBlockInfoResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockMasterClientServiceGetBlockInfoResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockMasterClientServiceGetBlockInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &common.BlockInfo{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBlockInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetBlockInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterClientServiceGetBlockInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterClientServiceGetBlockInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetBlockInfoResult(%+v)", *p)
}

type BlockMasterClientServiceGetCapacityBytesArgs struct {
}

func NewBlockMasterClientServiceGetCapacityBytesArgs() *BlockMasterClientServiceGetCapacityBytesArgs {
	return &BlockMasterClientServiceGetCapacityBytesArgs{}
}

func (p *BlockMasterClientServiceGetCapacityBytesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetCapacityBytesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCapacityBytes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetCapacityBytesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetCapacityBytesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockMasterClientServiceGetCapacityBytesResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockMasterClientServiceGetCapacityBytesResult() *BlockMasterClientServiceGetCapacityBytesResult {
	return &BlockMasterClientServiceGetCapacityBytesResult{}
}

var BlockMasterClientServiceGetCapacityBytesResult_Success_DEFAULT int64

func (p *BlockMasterClientServiceGetCapacityBytesResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return BlockMasterClientServiceGetCapacityBytesResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BlockMasterClientServiceGetCapacityBytesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterClientServiceGetCapacityBytesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetCapacityBytesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockMasterClientServiceGetCapacityBytesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCapacityBytes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetCapacityBytesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterClientServiceGetCapacityBytesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetCapacityBytesResult(%+v)", *p)
}

type BlockMasterClientServiceGetUsedBytesArgs struct {
}

func NewBlockMasterClientServiceGetUsedBytesArgs() *BlockMasterClientServiceGetUsedBytesArgs {
	return &BlockMasterClientServiceGetUsedBytesArgs{}
}

func (p *BlockMasterClientServiceGetUsedBytesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetUsedBytesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUsedBytes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetUsedBytesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetUsedBytesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockMasterClientServiceGetUsedBytesResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockMasterClientServiceGetUsedBytesResult() *BlockMasterClientServiceGetUsedBytesResult {
	return &BlockMasterClientServiceGetUsedBytesResult{}
}

var BlockMasterClientServiceGetUsedBytesResult_Success_DEFAULT int64

func (p *BlockMasterClientServiceGetUsedBytesResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return BlockMasterClientServiceGetUsedBytesResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BlockMasterClientServiceGetUsedBytesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterClientServiceGetUsedBytesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetUsedBytesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockMasterClientServiceGetUsedBytesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUsedBytes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetUsedBytesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterClientServiceGetUsedBytesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetUsedBytesResult(%+v)", *p)
}

type BlockMasterClientServiceGetWorkerInfoListArgs struct {
}

func NewBlockMasterClientServiceGetWorkerInfoListArgs() *BlockMasterClientServiceGetWorkerInfoListArgs {
	return &BlockMasterClientServiceGetWorkerInfoListArgs{}
}

func (p *BlockMasterClientServiceGetWorkerInfoListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerInfoList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetWorkerInfoListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockMasterClientServiceGetWorkerInfoListResult struct {
	Success []*WorkerInfo `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockMasterClientServiceGetWorkerInfoListResult() *BlockMasterClientServiceGetWorkerInfoListResult {
	return &BlockMasterClientServiceGetWorkerInfoListResult{}
}

var BlockMasterClientServiceGetWorkerInfoListResult_Success_DEFAULT []*WorkerInfo

func (p *BlockMasterClientServiceGetWorkerInfoListResult) GetSuccess() []*WorkerInfo {
	return p.Success
}
func (p *BlockMasterClientServiceGetWorkerInfoListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*WorkerInfo, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &WorkerInfo{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Success = append(p.Success, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerInfoList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterClientServiceGetWorkerInfoListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterClientServiceGetWorkerInfoListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterClientServiceGetWorkerInfoListResult(%+v)", *p)
}
