// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package block_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Address
//  - LastContactSec
//  - State
//  - CapacityBytes
//  - UsedBytes
//  - StartTimeMs
type WorkerInfo struct {
	ID             int64                    `thrift:"id,1" json:"id"`
	Address        *common.WorkerNetAddress `thrift:"address,2" json:"address"`
	LastContactSec int32                    `thrift:"lastContactSec,3" json:"lastContactSec"`
	State          string                   `thrift:"state,4" json:"state"`
	CapacityBytes  int64                    `thrift:"capacityBytes,5" json:"capacityBytes"`
	UsedBytes      int64                    `thrift:"usedBytes,6" json:"usedBytes"`
	StartTimeMs    int64                    `thrift:"startTimeMs,7" json:"startTimeMs"`
}

func NewWorkerInfo() *WorkerInfo {
	return &WorkerInfo{}
}

func (p *WorkerInfo) GetID() int64 {
	return p.ID
}

var WorkerInfo_Address_DEFAULT *common.WorkerNetAddress

func (p *WorkerInfo) GetAddress() *common.WorkerNetAddress {
	if !p.IsSetAddress() {
		return WorkerInfo_Address_DEFAULT
	}
	return p.Address
}

func (p *WorkerInfo) GetLastContactSec() int32 {
	return p.LastContactSec
}

func (p *WorkerInfo) GetState() string {
	return p.State
}

func (p *WorkerInfo) GetCapacityBytes() int64 {
	return p.CapacityBytes
}

func (p *WorkerInfo) GetUsedBytes() int64 {
	return p.UsedBytes
}

func (p *WorkerInfo) GetStartTimeMs() int64 {
	return p.StartTimeMs
}
func (p *WorkerInfo) IsSetAddress() bool {
	return p.Address != nil
}

func (p *WorkerInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkerInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *WorkerInfo) readField2(iprot thrift.TProtocol) error {
	p.Address = &common.WorkerNetAddress{}
	if err := p.Address.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Address), err)
	}
	return nil
}

func (p *WorkerInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastContactSec = v
	}
	return nil
}

func (p *WorkerInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *WorkerInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CapacityBytes = v
	}
	return nil
}

func (p *WorkerInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.UsedBytes = v
	}
	return nil
}

func (p *WorkerInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.StartTimeMs = v
	}
	return nil
}

func (p *WorkerInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WorkerInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("address", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err)
	}
	if err := p.Address.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Address), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("lastContactSec", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastContactSec: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LastContactSec)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastContactSec (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastContactSec: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:state: ", p), err)
	}
	if err := oprot.WriteString(string(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.state (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:state: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capacityBytes", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capacityBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CapacityBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capacityBytes (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capacityBytes: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usedBytes", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:usedBytes: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UsedBytes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usedBytes (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:usedBytes: ", p), err)
	}
	return err
}

func (p *WorkerInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startTimeMs", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:startTimeMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.StartTimeMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startTimeMs (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:startTimeMs: ", p), err)
	}
	return err
}

func (p *WorkerInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerInfo(%+v)", *p)
}
