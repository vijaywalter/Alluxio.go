// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package block_master

import (
	"bytes"
	"common"
	"exception"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = common.GoUnusedProtection__
var _ = exception.GoUnusedProtection__

type BlockMasterWorkerService interface {
	common.AlluxioService
	//This interface contains block master service endpoints for Alluxio workers.

	// Marks the given block as committed.
	//
	// Parameters:
	//  - WorkerId: the id of the worker
	//  - UsedBytesOnTier: the space used in bytes on the target tier
	//  - TierAlias: the alias of the target tier
	//  - BlockId: the id of the block being committed
	//  - Length: the length of the block being committed
	CommitBlock(workerId int64, usedBytesOnTier int64, tierAlias string, blockId int64, length int64) (err error)
	// Returns a worker id for the given network address.
	//
	// Parameters:
	//  - WorkerNetAddress: the worker network address
	GetWorkerId(workerNetAddress *common.WorkerNetAddress) (r int64, err error)
	// Periodic worker heartbeat returns an optional command for the worker to execute.
	//
	// Parameters:
	//  - WorkerId: the id of the worker
	//  - UsedBytesOnTiers: the map of space used in bytes on all tiers
	//  - RemovedBlockIds: the list of removed block ids
	//  - AddedBlocksOnTiers: the map of added blocks on all tiers
	Heartbeat(workerId int64, usedBytesOnTiers map[string]int64, removedBlockIds []int64, addedBlocksOnTiers map[string][]int64) (r *common.Command, err error)
	// Registers a worker.
	//
	// Parameters:
	//  - WorkerId: the id of the worker
	//  - StorageTiers: the list of storage tiers
	//  - TotalBytesOnTiers: the map of total bytes on each tier
	//  - UsedBytesOnTiers: the map of used bytes on each tier
	//  - CurrentBlocksOnTiers: the map of list of blocks on each tier
	RegisterWorker(workerId int64, storageTiers []string, totalBytesOnTiers map[string]int64, usedBytesOnTiers map[string]int64, currentBlocksOnTiers map[string][]int64) (err error)
}

//This interface contains block master service endpoints for Alluxio workers.
type BlockMasterWorkerServiceClient struct {
	*common.AlluxioServiceClient
}

func NewBlockMasterWorkerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlockMasterWorkerServiceClient {
	return &BlockMasterWorkerServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientFactory(t, f)}
}

func NewBlockMasterWorkerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlockMasterWorkerServiceClient {
	return &BlockMasterWorkerServiceClient{AlluxioServiceClient: common.NewAlluxioServiceClientProtocol(t, iprot, oprot)}
}

// Marks the given block as committed.
//
// Parameters:
//  - WorkerId: the id of the worker
//  - UsedBytesOnTier: the space used in bytes on the target tier
//  - TierAlias: the alias of the target tier
//  - BlockId: the id of the block being committed
//  - Length: the length of the block being committed
func (p *BlockMasterWorkerServiceClient) CommitBlock(workerId int64, usedBytesOnTier int64, tierAlias string, blockId int64, length int64) (err error) {
	if err = p.sendCommitBlock(workerId, usedBytesOnTier, tierAlias, blockId, length); err != nil {
		return
	}
	return p.recvCommitBlock()
}

func (p *BlockMasterWorkerServiceClient) sendCommitBlock(workerId int64, usedBytesOnTier int64, tierAlias string, blockId int64, length int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("commitBlock", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterWorkerServiceCommitBlockArgs{
		WorkerId:        workerId,
		UsedBytesOnTier: usedBytesOnTier,
		TierAlias:       tierAlias,
		BlockId:         blockId,
		Length:          length,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterWorkerServiceClient) recvCommitBlock() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "commitBlock" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "commitBlock failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "commitBlock failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error11 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error12 error
		error12, err = error11.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error12
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "commitBlock failed: invalid message type")
		return
	}
	result := BlockMasterWorkerServiceCommitBlockResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Returns a worker id for the given network address.
//
// Parameters:
//  - WorkerNetAddress: the worker network address
func (p *BlockMasterWorkerServiceClient) GetWorkerId(workerNetAddress *common.WorkerNetAddress) (r int64, err error) {
	if err = p.sendGetWorkerId(workerNetAddress); err != nil {
		return
	}
	return p.recvGetWorkerId()
}

func (p *BlockMasterWorkerServiceClient) sendGetWorkerId(workerNetAddress *common.WorkerNetAddress) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getWorkerId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterWorkerServiceGetWorkerIdArgs{
		WorkerNetAddress: workerNetAddress,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterWorkerServiceClient) recvGetWorkerId() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getWorkerId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getWorkerId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getWorkerId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error13 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error14 error
		error14, err = error13.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error14
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getWorkerId failed: invalid message type")
		return
	}
	result := BlockMasterWorkerServiceGetWorkerIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Periodic worker heartbeat returns an optional command for the worker to execute.
//
// Parameters:
//  - WorkerId: the id of the worker
//  - UsedBytesOnTiers: the map of space used in bytes on all tiers
//  - RemovedBlockIds: the list of removed block ids
//  - AddedBlocksOnTiers: the map of added blocks on all tiers
func (p *BlockMasterWorkerServiceClient) Heartbeat(workerId int64, usedBytesOnTiers map[string]int64, removedBlockIds []int64, addedBlocksOnTiers map[string][]int64) (r *common.Command, err error) {
	if err = p.sendHeartbeat(workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers); err != nil {
		return
	}
	return p.recvHeartbeat()
}

func (p *BlockMasterWorkerServiceClient) sendHeartbeat(workerId int64, usedBytesOnTiers map[string]int64, removedBlockIds []int64, addedBlocksOnTiers map[string][]int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("heartbeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterWorkerServiceHeartbeatArgs{
		WorkerId:           workerId,
		UsedBytesOnTiers:   usedBytesOnTiers,
		RemovedBlockIds:    removedBlockIds,
		AddedBlocksOnTiers: addedBlocksOnTiers,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterWorkerServiceClient) recvHeartbeat() (value *common.Command, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "heartbeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "heartbeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "heartbeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error15 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error16 error
		error16, err = error15.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error16
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartbeat failed: invalid message type")
		return
	}
	result := BlockMasterWorkerServiceHeartbeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Registers a worker.
//
// Parameters:
//  - WorkerId: the id of the worker
//  - StorageTiers: the list of storage tiers
//  - TotalBytesOnTiers: the map of total bytes on each tier
//  - UsedBytesOnTiers: the map of used bytes on each tier
//  - CurrentBlocksOnTiers: the map of list of blocks on each tier
func (p *BlockMasterWorkerServiceClient) RegisterWorker(workerId int64, storageTiers []string, totalBytesOnTiers map[string]int64, usedBytesOnTiers map[string]int64, currentBlocksOnTiers map[string][]int64) (err error) {
	if err = p.sendRegisterWorker(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers); err != nil {
		return
	}
	return p.recvRegisterWorker()
}

func (p *BlockMasterWorkerServiceClient) sendRegisterWorker(workerId int64, storageTiers []string, totalBytesOnTiers map[string]int64, usedBytesOnTiers map[string]int64, currentBlocksOnTiers map[string][]int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWorker", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BlockMasterWorkerServiceRegisterWorkerArgs{
		WorkerId:             workerId,
		StorageTiers:         storageTiers,
		TotalBytesOnTiers:    totalBytesOnTiers,
		UsedBytesOnTiers:     usedBytesOnTiers,
		CurrentBlocksOnTiers: currentBlocksOnTiers,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BlockMasterWorkerServiceClient) recvRegisterWorker() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerWorker" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerWorker failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerWorker failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error17 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error18 error
		error18, err = error17.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error18
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerWorker failed: invalid message type")
		return
	}
	result := BlockMasterWorkerServiceRegisterWorkerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type BlockMasterWorkerServiceProcessor struct {
	*common.AlluxioServiceProcessor
}

func NewBlockMasterWorkerServiceProcessor(handler BlockMasterWorkerService) *BlockMasterWorkerServiceProcessor {
	self19 := &BlockMasterWorkerServiceProcessor{common.NewAlluxioServiceProcessor(handler)}
	self19.AddToProcessorMap("commitBlock", &blockMasterWorkerServiceProcessorCommitBlock{handler: handler})
	self19.AddToProcessorMap("getWorkerId", &blockMasterWorkerServiceProcessorGetWorkerId{handler: handler})
	self19.AddToProcessorMap("heartbeat", &blockMasterWorkerServiceProcessorHeartbeat{handler: handler})
	self19.AddToProcessorMap("registerWorker", &blockMasterWorkerServiceProcessorRegisterWorker{handler: handler})
	return self19
}

type blockMasterWorkerServiceProcessorCommitBlock struct {
	handler BlockMasterWorkerService
}

func (p *blockMasterWorkerServiceProcessorCommitBlock) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterWorkerServiceCommitBlockArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("commitBlock", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterWorkerServiceCommitBlockResult{}
	var err2 error
	if err2 = p.handler.CommitBlock(args.WorkerId, args.UsedBytesOnTier, args.TierAlias, args.BlockId, args.Length); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing commitBlock: "+err2.Error())
			oprot.WriteMessageBegin("commitBlock", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("commitBlock", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterWorkerServiceProcessorGetWorkerId struct {
	handler BlockMasterWorkerService
}

func (p *blockMasterWorkerServiceProcessorGetWorkerId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterWorkerServiceGetWorkerIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getWorkerId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterWorkerServiceGetWorkerIdResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetWorkerId(args.WorkerNetAddress); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getWorkerId: "+err2.Error())
		oprot.WriteMessageBegin("getWorkerId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getWorkerId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterWorkerServiceProcessorHeartbeat struct {
	handler BlockMasterWorkerService
}

func (p *blockMasterWorkerServiceProcessorHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterWorkerServiceHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterWorkerServiceHeartbeatResult{}
	var retval *common.Command
	var err2 error
	if retval, err2 = p.handler.Heartbeat(args.WorkerId, args.UsedBytesOnTiers, args.RemovedBlockIds, args.AddedBlocksOnTiers); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartbeat: "+err2.Error())
		oprot.WriteMessageBegin("heartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("heartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blockMasterWorkerServiceProcessorRegisterWorker struct {
	handler BlockMasterWorkerService
}

func (p *blockMasterWorkerServiceProcessorRegisterWorker) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlockMasterWorkerServiceRegisterWorkerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerWorker", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BlockMasterWorkerServiceRegisterWorkerResult{}
	var err2 error
	if err2 = p.handler.RegisterWorker(args.WorkerId, args.StorageTiers, args.TotalBytesOnTiers, args.UsedBytesOnTiers, args.CurrentBlocksOnTiers); err2 != nil {
		switch v := err2.(type) {
		case *exception.AlluxioTException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWorker: "+err2.Error())
			oprot.WriteMessageBegin("registerWorker", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("registerWorker", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - WorkerId: the id of the worker
//  - UsedBytesOnTier: the space used in bytes on the target tier
//  - TierAlias: the alias of the target tier
//  - BlockId: the id of the block being committed
//  - Length: the length of the block being committed
type BlockMasterWorkerServiceCommitBlockArgs struct {
	WorkerId        int64  `thrift:"workerId,1" json:"workerId"`
	UsedBytesOnTier int64  `thrift:"usedBytesOnTier,2" json:"usedBytesOnTier"`
	TierAlias       string `thrift:"tierAlias,3" json:"tierAlias"`
	BlockId         int64  `thrift:"blockId,4" json:"blockId"`
	Length          int64  `thrift:"length,5" json:"length"`
}

func NewBlockMasterWorkerServiceCommitBlockArgs() *BlockMasterWorkerServiceCommitBlockArgs {
	return &BlockMasterWorkerServiceCommitBlockArgs{}
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) GetWorkerId() int64 {
	return p.WorkerId
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) GetUsedBytesOnTier() int64 {
	return p.UsedBytesOnTier
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) GetTierAlias() string {
	return p.TierAlias
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) GetBlockId() int64 {
	return p.BlockId
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) GetLength() int64 {
	return p.Length
}
func (p *BlockMasterWorkerServiceCommitBlockArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UsedBytesOnTier = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TierAlias = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BlockId = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Length = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitBlock_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WorkerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.workerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerId: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usedBytesOnTier", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usedBytesOnTier: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.UsedBytesOnTier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usedBytesOnTier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usedBytesOnTier: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tierAlias", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tierAlias: ", p), err)
	}
	if err := oprot.WriteString(string(p.TierAlias)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tierAlias (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tierAlias: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockId", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blockId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BlockId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.blockId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blockId: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("length", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:length: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Length)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.length (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:length: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceCommitBlockArgs(%+v)", *p)
}

// Attributes:
//  - E
type BlockMasterWorkerServiceCommitBlockResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockMasterWorkerServiceCommitBlockResult() *BlockMasterWorkerServiceCommitBlockResult {
	return &BlockMasterWorkerServiceCommitBlockResult{}
}

var BlockMasterWorkerServiceCommitBlockResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockMasterWorkerServiceCommitBlockResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockMasterWorkerServiceCommitBlockResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockMasterWorkerServiceCommitBlockResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockMasterWorkerServiceCommitBlockResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("commitBlock_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceCommitBlockResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterWorkerServiceCommitBlockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceCommitBlockResult(%+v)", *p)
}

// Attributes:
//  - WorkerNetAddress: the worker network address
type BlockMasterWorkerServiceGetWorkerIdArgs struct {
	WorkerNetAddress *common.WorkerNetAddress `thrift:"workerNetAddress,1" json:"workerNetAddress"`
}

func NewBlockMasterWorkerServiceGetWorkerIdArgs() *BlockMasterWorkerServiceGetWorkerIdArgs {
	return &BlockMasterWorkerServiceGetWorkerIdArgs{}
}

var BlockMasterWorkerServiceGetWorkerIdArgs_WorkerNetAddress_DEFAULT *common.WorkerNetAddress

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) GetWorkerNetAddress() *common.WorkerNetAddress {
	if !p.IsSetWorkerNetAddress() {
		return BlockMasterWorkerServiceGetWorkerIdArgs_WorkerNetAddress_DEFAULT
	}
	return p.WorkerNetAddress
}
func (p *BlockMasterWorkerServiceGetWorkerIdArgs) IsSetWorkerNetAddress() bool {
	return p.WorkerNetAddress != nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) readField1(iprot thrift.TProtocol) error {
	p.WorkerNetAddress = &common.WorkerNetAddress{}
	if err := p.WorkerNetAddress.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkerNetAddress), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerNetAddress", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerNetAddress: ", p), err)
	}
	if err := p.WorkerNetAddress.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkerNetAddress), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerNetAddress: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceGetWorkerIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceGetWorkerIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockMasterWorkerServiceGetWorkerIdResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockMasterWorkerServiceGetWorkerIdResult() *BlockMasterWorkerServiceGetWorkerIdResult {
	return &BlockMasterWorkerServiceGetWorkerIdResult{}
}

var BlockMasterWorkerServiceGetWorkerIdResult_Success_DEFAULT int64

func (p *BlockMasterWorkerServiceGetWorkerIdResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return BlockMasterWorkerServiceGetWorkerIdResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *BlockMasterWorkerServiceGetWorkerIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getWorkerId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceGetWorkerIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterWorkerServiceGetWorkerIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceGetWorkerIdResult(%+v)", *p)
}

// Attributes:
//  - WorkerId: the id of the worker
//  - UsedBytesOnTiers: the map of space used in bytes on all tiers
//  - RemovedBlockIds: the list of removed block ids
//  - AddedBlocksOnTiers: the map of added blocks on all tiers
type BlockMasterWorkerServiceHeartbeatArgs struct {
	WorkerId           int64              `thrift:"workerId,1" json:"workerId"`
	UsedBytesOnTiers   map[string]int64   `thrift:"usedBytesOnTiers,2" json:"usedBytesOnTiers"`
	RemovedBlockIds    []int64            `thrift:"removedBlockIds,3" json:"removedBlockIds"`
	AddedBlocksOnTiers map[string][]int64 `thrift:"addedBlocksOnTiers,4" json:"addedBlocksOnTiers"`
}

func NewBlockMasterWorkerServiceHeartbeatArgs() *BlockMasterWorkerServiceHeartbeatArgs {
	return &BlockMasterWorkerServiceHeartbeatArgs{}
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) GetWorkerId() int64 {
	return p.WorkerId
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) GetUsedBytesOnTiers() map[string]int64 {
	return p.UsedBytesOnTiers
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) GetRemovedBlockIds() []int64 {
	return p.RemovedBlockIds
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) GetAddedBlocksOnTiers() map[string][]int64 {
	return p.AddedBlocksOnTiers
}
func (p *BlockMasterWorkerServiceHeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.UsedBytesOnTiers = tMap
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key20 = v
		}
		var _val21 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val21 = v
		}
		p.UsedBytesOnTiers[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.RemovedBlockIds = tSlice
	for i := 0; i < size; i++ {
		var _elem22 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem22 = v
		}
		p.RemovedBlockIds = append(p.RemovedBlockIds, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]int64, size)
	p.AddedBlocksOnTiers = tMap
	for i := 0; i < size; i++ {
		var _key23 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key23 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int64, 0, size)
		_val24 := tSlice
		for i := 0; i < size; i++ {
			var _elem25 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem25 = v
			}
			_val24 = append(_val24, _elem25)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.AddedBlocksOnTiers[_key23] = _val24
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WorkerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.workerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerId: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usedBytesOnTiers", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usedBytesOnTiers: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.UsedBytesOnTiers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.UsedBytesOnTiers {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usedBytesOnTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("removedBlockIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:removedBlockIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.RemovedBlockIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RemovedBlockIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:removedBlockIds: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addedBlocksOnTiers", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addedBlocksOnTiers: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.AddedBlocksOnTiers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.AddedBlocksOnTiers {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addedBlocksOnTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BlockMasterWorkerServiceHeartbeatResult struct {
	Success *common.Command `thrift:"success,0" json:"success,omitempty"`
}

func NewBlockMasterWorkerServiceHeartbeatResult() *BlockMasterWorkerServiceHeartbeatResult {
	return &BlockMasterWorkerServiceHeartbeatResult{}
}

var BlockMasterWorkerServiceHeartbeatResult_Success_DEFAULT *common.Command

func (p *BlockMasterWorkerServiceHeartbeatResult) GetSuccess() *common.Command {
	if !p.IsSetSuccess() {
		return BlockMasterWorkerServiceHeartbeatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BlockMasterWorkerServiceHeartbeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlockMasterWorkerServiceHeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &common.Command{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterWorkerServiceHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - WorkerId: the id of the worker
//  - StorageTiers: the list of storage tiers
//  - TotalBytesOnTiers: the map of total bytes on each tier
//  - UsedBytesOnTiers: the map of used bytes on each tier
//  - CurrentBlocksOnTiers: the map of list of blocks on each tier
type BlockMasterWorkerServiceRegisterWorkerArgs struct {
	WorkerId             int64              `thrift:"workerId,1" json:"workerId"`
	StorageTiers         []string           `thrift:"storageTiers,2" json:"storageTiers"`
	TotalBytesOnTiers    map[string]int64   `thrift:"totalBytesOnTiers,3" json:"totalBytesOnTiers"`
	UsedBytesOnTiers     map[string]int64   `thrift:"usedBytesOnTiers,4" json:"usedBytesOnTiers"`
	CurrentBlocksOnTiers map[string][]int64 `thrift:"currentBlocksOnTiers,5" json:"currentBlocksOnTiers"`
}

func NewBlockMasterWorkerServiceRegisterWorkerArgs() *BlockMasterWorkerServiceRegisterWorkerArgs {
	return &BlockMasterWorkerServiceRegisterWorkerArgs{}
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) GetWorkerId() int64 {
	return p.WorkerId
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) GetStorageTiers() []string {
	return p.StorageTiers
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) GetTotalBytesOnTiers() map[string]int64 {
	return p.TotalBytesOnTiers
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) GetUsedBytesOnTiers() map[string]int64 {
	return p.UsedBytesOnTiers
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) GetCurrentBlocksOnTiers() map[string][]int64 {
	return p.CurrentBlocksOnTiers
}
func (p *BlockMasterWorkerServiceRegisterWorkerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WorkerId = v
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.StorageTiers = tSlice
	for i := 0; i < size; i++ {
		var _elem26 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem26 = v
		}
		p.StorageTiers = append(p.StorageTiers, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.TotalBytesOnTiers = tMap
	for i := 0; i < size; i++ {
		var _key27 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key27 = v
		}
		var _val28 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val28 = v
		}
		p.TotalBytesOnTiers[_key27] = _val28
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.UsedBytesOnTiers = tMap
	for i := 0; i < size; i++ {
		var _key29 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key29 = v
		}
		var _val30 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val30 = v
		}
		p.UsedBytesOnTiers[_key29] = _val30
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]int64, size)
	p.CurrentBlocksOnTiers = tMap
	for i := 0; i < size; i++ {
		var _key31 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key31 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int64, 0, size)
		_val32 := tSlice
		for i := 0; i < size; i++ {
			var _elem33 int64
			if v, err := iprot.ReadI64(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem33 = v
			}
			_val32 = append(_val32, _elem33)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.CurrentBlocksOnTiers[_key31] = _val32
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWorker_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("workerId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:workerId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.WorkerId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.workerId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:workerId: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("storageTiers", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:storageTiers: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StorageTiers)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.StorageTiers {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:storageTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalBytesOnTiers", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalBytesOnTiers: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TotalBytesOnTiers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.TotalBytesOnTiers {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalBytesOnTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usedBytesOnTiers", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:usedBytesOnTiers: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.UsedBytesOnTiers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.UsedBytesOnTiers {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:usedBytesOnTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentBlocksOnTiers", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currentBlocksOnTiers: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.CurrentBlocksOnTiers)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.CurrentBlocksOnTiers {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currentBlocksOnTiers: ", p), err)
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceRegisterWorkerArgs(%+v)", *p)
}

// Attributes:
//  - E
type BlockMasterWorkerServiceRegisterWorkerResult struct {
	E *exception.AlluxioTException `thrift:"e,1" json:"e,omitempty"`
}

func NewBlockMasterWorkerServiceRegisterWorkerResult() *BlockMasterWorkerServiceRegisterWorkerResult {
	return &BlockMasterWorkerServiceRegisterWorkerResult{}
}

var BlockMasterWorkerServiceRegisterWorkerResult_E_DEFAULT *exception.AlluxioTException

func (p *BlockMasterWorkerServiceRegisterWorkerResult) GetE() *exception.AlluxioTException {
	if !p.IsSetE() {
		return BlockMasterWorkerServiceRegisterWorkerResult_E_DEFAULT
	}
	return p.E
}
func (p *BlockMasterWorkerServiceRegisterWorkerResult) IsSetE() bool {
	return p.E != nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerResult) readField1(iprot thrift.TProtocol) error {
	p.E = &exception.AlluxioTException{}
	if err := p.E.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWorker_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BlockMasterWorkerServiceRegisterWorkerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *BlockMasterWorkerServiceRegisterWorkerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlockMasterWorkerServiceRegisterWorkerResult(%+v)", *p)
}
